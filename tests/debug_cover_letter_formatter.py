#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–±–∞–≥–≥–µ—Ä —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è cover letter.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python tests/debug_cover_letter_formatter.py
"""

import json
import sys
from pathlib import Path
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from src.parsers.resume_extractor import ResumeExtractor
from src.parsers.vacancy_extractor import VacancyExtractor
from src.llm_cover_letter.formatter import (
    format_resume_for_cover_letter,
    format_vacancy_for_cover_letter
)
from src.utils.logging_config import setup_logging

def load_json_file(file_path: str) -> Optional[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
        return None

def debug_resume_formatting(resume_json_path: str) -> None:
    """–û—Ç–ª–∞–¥–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—é–º–µ –¥–ª—è cover letter."""
    print("\n" + "="*80)
    print("üë§ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–Æ–ú–ï –î–õ–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¢–ï–õ–¨–ù–û–ì–û –ü–ò–°–¨–ú–ê")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Ä–µ–∑—é–º–µ
    raw_data = load_json_file(resume_json_path)
    if not raw_data:
        return
    
    extractor = ResumeExtractor()
    parsed_resume = extractor.extract_resume_info(raw_data)
    
    if not parsed_resume:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—é–º–µ!")
        return
    
    print("‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è cover letter
    try:
        resume_dict = parsed_resume.model_dump()
        formatted_text = format_resume_for_cover_letter(resume_dict)
        
        print("\nüìÑ –û–¢–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–û–ï –†–ï–ó–Æ–ú–ï –î–õ–Ø COVER LETTER:")
        print("-" * 60)
        print(formatted_text)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"üìä –î–ª–∏–Ω–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(formatted_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
        used_fields = []
        if resume_dict.get('first_name') or resume_dict.get('last_name'):
            used_fields.append("–§–ò–û")
        if resume_dict.get('total_experience'):
            used_fields.append("–û–±—â–∏–π –æ–ø—ã—Ç")
        if resume_dict.get('title'):
            used_fields.append("–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        if resume_dict.get('skills'):
            used_fields.append("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
        if resume_dict.get('skill_set'):
            used_fields.append("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏")
        if resume_dict.get('experience'):
            used_fields.append("–ö–∞—Ä—å–µ—Ä–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è")
        if resume_dict.get('certificate'):
            used_fields.append("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")
        if resume_dict.get('languages'):
            used_fields.append("–Ø–∑—ã–∫–∏")
        
        print(f"\n‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è ({len(used_fields)}):")
        for field in used_fields:
            print(f"  ‚Ä¢ {field}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def debug_vacancy_formatting(vacancy_json_path: str) -> None:
    """–û—Ç–ª–∞–¥–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è cover letter."""
    print("\n" + "="*80)
    print("üéØ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–ö–ê–ù–°–ò–ò –î–õ–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¢–ï–õ–¨–ù–û–ì–û –ü–ò–°–¨–ú–ê")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –≤–∞–∫–∞–Ω—Å–∏—é
    raw_data = load_json_file(vacancy_json_path)
    if not raw_data:
        return
    
    extractor = VacancyExtractor()
    parsed_vacancy = extractor.extract_vacancy_info(raw_data)
    
    if not parsed_vacancy:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–∏!")
        return
    
    print("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è cover letter
    try:
        vacancy_dict = parsed_vacancy.model_dump()
        formatted_text = format_vacancy_for_cover_letter(vacancy_dict)
        
        print("\nüìÑ –û–¢–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–ê–Ø –í–ê–ö–ê–ù–°–ò–Ø –î–õ–Ø COVER LETTER:")
        print("-" * 60)
        print(formatted_text)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"üìä –î–ª–∏–Ω–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(formatted_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
        used_fields = []
        if vacancy_dict.get('name'):
            used_fields.append("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
        if vacancy_dict.get('professional_roles'):
            used_fields.append("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏")
        if vacancy_dict.get('description'):
            used_fields.append("–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
        if vacancy_dict.get('key_skills'):
            used_fields.append("–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏")
        if vacancy_dict.get('experience'):
            used_fields.append("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–ø—ã—Ç—É")
        
        print(f"\n‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è ({len(used_fields)}):")
        for field in used_fields:
            print(f"  ‚Ä¢ {field}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–±–∞–≥–≥–µ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ cover letter."""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(log_level="INFO")
    
    print("üîç –î–ï–ë–ê–ì–ì–ï–† –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –§–û–†–ú–ê–¢–¢–ï–†–ê COVER LETTER")
    print("=" * 80)
    
    # ===============================================
    # –ù–ê–°–¢–†–û–ô–ö–ò –û–¢–õ–ê–î–ö–ò
    # ===============================================
    
    # –ü–£–¢–ò –ö JSON –§–ê–ô–õ–ê–ú
    resume_json_path = "/Users/mask/Documents/–ü—Ä–æ–µ—Ç—ã_2025/gpt_4_mini_hackaton_final/tests/test_models_res_vac/fetched_resume_6d807532ff0ed6b79f0039ed1f63386d724a62.json"      # üëà –£–ö–ê–ñ–ò–¢–ï –ü–£–¢–¨ –ö –†–ï–ó–Æ–ú–ï
    vacancy_json_path = "/Users/mask/Documents/–ü—Ä–æ–µ—Ç—ã_2025/gpt_4_mini_hackaton_final/tests/test_models_res_vac/fetched_vacancy_120234346.json"    # üëà –£–ö–ê–ñ–ò–¢–ï –ü–£–¢–¨ –ö –í–ê–ö–ê–ù–°–ò–ò
    
    # –§–õ–ê–ì–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø (True/False)
    debug_resume_fmt = True       # üëà –û—Ç–ª–∞–¥–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ
    debug_vacancy_fmt = True      # üëà –û—Ç–ª–∞–¥–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    
    # ===============================================
    
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ
        if debug_resume_fmt:
            debug_resume_formatting(resume_json_path)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        if debug_vacancy_fmt:
            debug_vacancy_formatting(vacancy_json_path)
        
        print("\n" + "="*80)
        print("‚úÖ –î–ï–ë–ê–ì–ì–ï–† –§–û–†–ú–ê–¢–¢–ï–†–ê –ó–ê–í–ï–†–®–ï–ù!")
        print("="*80)
        print("\nüí° –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()