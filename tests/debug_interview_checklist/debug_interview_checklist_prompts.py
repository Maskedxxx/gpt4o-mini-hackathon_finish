# tests/debug_interview_checklist_prompts.py
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ interview checklist generator.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é.
"""

import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.llm_interview_checklist.llm_interview_checklist_generator import LLMInterviewChecklistGenerator
from src.llm_interview_checklist.formatter import (
    format_resume_for_interview_prep,
    format_vacancy_for_interview_prep
)
from src.parsers.resume_extractor import ResumeExtractor
from src.parsers.vacancy_extractor import VacancyExtractor

def load_test_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    try:
        # –ü—É—Ç–∏ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
        resume_path = Path("/Users/mask/Documents/–ü—Ä–æ–µ—Ç—ã_2025/gpt_4_mini_hackaton_final/tests/test_models_res_vac/fetched_resume_6d807532ff0ed6b79f0039ed1f63386d724a62.json")
        vacancy_path = Path("/Users/mask/Documents/–ü—Ä–æ–µ—Ç—ã_2025/gpt_4_mini_hackaton_final/tests/test_models_res_vac/fetched_vacancy_120234346.json")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(resume_path, 'r', encoding='utf-8') as f:
            raw_resume = json.load(f)
            
        with open(vacancy_path, 'r', encoding='utf-8') as f:
            raw_vacancy = json.load(f)
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        resume_extractor = ResumeExtractor()
        vacancy_extractor = VacancyExtractor()
        
        parsed_resume = resume_extractor.extract_resume_info(raw_resume)
        parsed_vacancy = vacancy_extractor.extract_vacancy_info(raw_vacancy)
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–ø–∞—Ä—Å–µ–Ω—ã")
        print(f"   ‚Ä¢ –†–µ–∑—é–º–µ: {type(parsed_resume).__name__}")
        print(f"   ‚Ä¢ –í–∞–∫–∞–Ω—Å–∏—è: {type(parsed_vacancy).__name__}")
        
        return parsed_resume, parsed_vacancy
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None

def test_data_formatting(parsed_resume, parsed_vacancy):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤."""
    print("\n" + "="*80)
    print("üìù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –î–ê–ù–ù–´–•")
    print("="*80)
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
        resume_dict = parsed_resume.model_dump()
        vacancy_dict = parsed_vacancy.model_dump()
        
        print("üî∏ –î–ê–ù–ù–´–ï –†–ï–ó–Æ–ú–ï:")
        print(f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {resume_dict.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"   ‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {len(resume_dict.get('experience', []))} –ø–æ–∑–∏—Ü–∏–π")
        print(f"   ‚Ä¢ –ù–∞–≤—ã–∫–∏: {len(resume_dict.get('skill_set', []))} –Ω–∞–≤—ã–∫–æ–≤")
        
        print("\nüî∏ –î–ê–ù–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò:")
        print(f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {vacancy_dict.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"   ‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: {vacancy_dict.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        print(f"   ‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏: {len(vacancy_dict.get('key_skills', []))} –Ω–∞–≤—ã–∫–æ–≤")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
        formatted_resume = format_resume_for_interview_prep(resume_dict)
        formatted_vacancy = format_vacancy_for_interview_prep(vacancy_dict)
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   ‚Ä¢ –î–ª–∏–Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ: {len(formatted_resume):,} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   ‚Ä¢ –î–ª–∏–Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏: {len(formatted_vacancy):,} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   ‚Ä¢ –û–±—â–∞—è –¥–ª–∏–Ω–∞: {len(formatted_resume) + len(formatted_vacancy):,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return resume_dict, vacancy_dict, formatted_resume, formatted_vacancy
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return None, None, None, None

def test_prompt_generation(resume_dict, vacancy_dict):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤."""
    print("\n" + "="*80)
    print("üß† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–†–û–ú–ü–¢–û–í")
    print("="*80)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = LLMInterviewChecklistGenerator()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
        full_prompt = generator._create_professional_interview_checklist_prompt(resume_dict, vacancy_dict)
        
        # –°–∏—Å—Ç–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º API
        system_prompt = (
            "–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π HR-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ IT-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é —Å 10+ –ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. "
            "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ "
            "—Ä–µ–∞–ª—å–Ω–æ –ø–æ–º–æ–≥–∞—é—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—Ç—É. "
            "–°–ª–µ–¥—É–µ—à—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∏ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º HR-–∏–Ω–¥—É—Å—Ç—Ä–∏–∏. "
            "–í—Å–µ–≥–¥–∞ –ø–∏—à–µ—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –¥–∞–µ—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. "
            "–û—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ ProfessionalInterviewChecklist."
        )
        user_prompt = full_prompt
        
        print("‚úÖ –ü—Ä–æ–º–ø—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º system prompt
        print("\nüîß SYSTEM PROMPT:")
        print("-" * 60)
        print(system_prompt[:500] + "..." if len(system_prompt) > 500 else system_prompt)
        print("-" * 60)
        print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {len(system_prompt):,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º user prompt (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)
        print("\nüë§ USER PROMPT (–ø–µ—Ä–≤—ã–µ 800 —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-" * 60)
        print(user_prompt[:80000] + "..." if len(user_prompt) > 800 else user_prompt)
        print("-" * 60)
        print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {len(user_prompt):,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_length = len(system_prompt) + len(user_prompt)
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ú–ü–¢–û–í:")
        print(f"   ‚Ä¢ –û–±—â–∞—è –¥–ª–∏–Ω–∞: {total_length:,} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   ‚Ä¢ System: {len(system_prompt):,} —Å–∏–º–≤–æ–ª–æ–≤ ({len(system_prompt)/total_length*100:.1f}%)")
        print(f"   ‚Ä¢ User: {len(user_prompt):,} —Å–∏–º–≤–æ–ª–æ–≤ ({len(user_prompt)/total_length*100:.1f}%)")
        
        return system_prompt, user_prompt
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
        return None, None

def test_messages_format(system_prompt, user_prompt):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è OpenAI API."""
    print("\n" + "="*80)
    print("üì° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–û–†–ú–ê–¢–ê –°–û–û–ë–©–ï–ù–ò–ô")
    print("="*80)
    
    try:
        # –°–æ–∑–¥–∞–µ–º messages –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]
        
        print("‚úÖ Messages —Å–æ–∑–¥–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI API")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("\nüìã –°–¢–†–£–ö–¢–£–†–ê MESSAGES:")
        print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        print(f"   ‚Ä¢ –†–æ–ª—å 1: {messages[0]['role']} ({len(messages[0]['content']):,} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"   ‚Ä¢ –†–æ–ª—å 2: {messages[1]['role']} ({len(messages[1]['content']):,} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º JSON (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)
        print("\nüîç –ü–†–ò–ú–ï–† MESSAGES JSON (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ):")
        print("```json")
        sample_messages = [
            {"role": "system", "content": system_prompt[:200] + "..."},
            {"role": "user", "content": user_prompt[:200] + "..."}
        ]
        print(json.dumps(sample_messages, ensure_ascii=False, indent=2))
        print("```")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
        print("\nüöÄ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –û–¢–ü–†–ê–í–ö–ï:")
        print("   ‚Ä¢ –§–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ‚úÖ")
        print("   ‚Ä¢ –†–æ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: ‚úÖ")
        print("   ‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω: ‚úÖ")
        
        total_tokens_estimate = (len(system_prompt) + len(user_prompt)) // 4  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: ~{total_tokens_estimate:,}")
        
        if total_tokens_estimate > 8000:
            print("   ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –º–æ–¥–µ–ª–∏")
        else:
            print("   ‚úÖ –†–∞–∑–º–µ—Ä –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–æ–≤")
        
        return messages
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è messages: {e}")
        return None

def analyze_prompt_components(system_prompt, user_prompt, formatted_resume, formatted_vacancy):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–º–ø—Ç–æ–≤."""
    print("\n" + "="*80)
    print("üî¨ –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ü–†–û–ú–ü–¢–û–í")
    print("="*80)
    
    try:
        print("üî∏ 1. –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:")
        print("   ‚Ä¢ ResumeInfo ‚Üí resume_dict ‚Üí format_resume_for_interview_prep()")
        print("   ‚Ä¢ VacancyInfo ‚Üí vacancy_dict ‚Üí format_vacancy_for_interview_prep()")
        
        print("\nüî∏ 2. –ö–û–ú–ü–û–ù–ï–ù–¢–´ SYSTEM PROMPT:")
        system_sections = system_prompt.split('\n\n')
        print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π: {len(system_sections)}")
        print(f"   ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É: {'–∞–Ω–∞–ª–∏–∑' in system_prompt.lower()}")
        print(f"   ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É: {'InterviewChecklist' in system_prompt}")
        
        print("\nüî∏ 3. –ö–û–ú–ü–û–ù–ï–ù–¢–´ USER PROMPT:")
        print(f"   ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—é–º–µ: {len(formatted_resume):,} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–∫–∞–Ω—Å–∏—é: {len(formatted_vacancy):,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–µ–∫—Ü–∏–π
        resume_sections = formatted_resume.count('###')
        vacancy_sections = formatted_vacancy.count('###')
        print(f"   ‚Ä¢ –°–µ–∫—Ü–∏–π –≤ —Ä–µ–∑—é–º–µ: {resume_sections}")
        print(f"   ‚Ä¢ –°–µ–∫—Ü–∏–π –≤ –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy_sections}")
        
        print("\nüî∏ 4. –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –í –ü–†–û–ú–ü–¢–ê–•:")
        combined_prompts = (system_prompt + user_prompt).lower()
        keywords = [
            '–∏–Ω—Ç–µ—Ä–≤—å—é', '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞', '–Ω–∞–≤—ã–∫–∏', '–æ–ø—ã—Ç', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 
            '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏', '—á–µ–∫-–ª–∏—Å—Ç', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
        ]
        
        for keyword in keywords:
            count = combined_prompts.count(keyword)
            if count > 0:
                print(f"   ‚Ä¢ '{keyword}': {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        print("\nüî∏ 5. –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ì–ï–ù–ï–†–ê–¶–ò–ò:")
        print("   ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ‚úÖ")
        print("   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ‚úÖ")
        print("   ‚Ä¢ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: ‚úÖ")
        print("   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —è—Å–µ–Ω: ‚úÖ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤."""
    print("üöÄ –ó–ê–ü–£–°–ö –û–¢–õ–ê–î–ö–ò –ü–†–û–ú–ü–¢–û–í INTERVIEW CHECKLIST")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    parsed_resume, parsed_vacancy = load_test_data()
    
    if not parsed_resume or not parsed_vacancy:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    resume_dict, vacancy_dict, formatted_resume, formatted_vacancy = test_data_formatting(
        parsed_resume, parsed_vacancy
    )
    
    if not all([resume_dict, vacancy_dict, formatted_resume, formatted_vacancy]):
        print("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã
    system_prompt, user_prompt = test_prompt_generation(resume_dict, vacancy_dict)
    
    if not system_prompt or not user_prompt:
        print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    messages = test_messages_format(system_prompt, user_prompt)
    
    if messages:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        analyze_prompt_components(system_prompt, user_prompt, formatted_resume, formatted_vacancy)
        
        print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ú–ü–¢–û–í –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
        print("   ‚Ä¢ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   ‚Ä¢ –ü—Ä–æ–º–ø—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ OpenAI API")
        print("   ‚Ä¢ –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ InterviewChecklist")
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")

if __name__ == "__main__":
    main()