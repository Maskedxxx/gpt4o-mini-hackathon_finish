#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–±–∞–≥–≥–µ—Ä —Ö–µ–Ω–¥–ª–µ—Ä–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è Telegram.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –±–ª–æ–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python tests/debug_interview_checklist_handler.py
"""

import json
import sys
from pathlib import Path
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from src.models.interview_checklist_models import ProfessionalInterviewChecklist
from src.utils.logging_config import setup_logging

def load_interview_checklist_result(file_path: str) -> Optional[ProfessionalInterviewChecklist]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º Pydantic –æ–±—ä–µ–∫—Ç –∏–∑ JSON
        checklist = ProfessionalInterviewChecklist.model_validate(data)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {file_path}")
        return checklist
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞: {e}")
        return None

def show_all_formatted_messages(checklist: ProfessionalInterviewChecklist):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–∞
        from src.tg_bot.handlers.spec_handlers.interview_checklist_handler import (
            format_professional_checklist_header,
            format_executive_summary,
            format_technical_preparation,
            format_behavioral_preparation,
            format_company_research,
            format_technical_stack_study,
            format_practical_exercises,
            format_interview_setup,
            format_additional_actions,
            format_critical_success_factors
        )
        
        print(f"\n{'='*80}")
        print(f"üì± –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í TELEGRAM")
        print(f"{'='*80}")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ 1: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        print("\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #1: –ó–ê–ì–û–õ–û–í–û–ö –ò –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
        print("-" * 60)
        try:
            header = format_professional_checklist_header(checklist)
            print(header)
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(header)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ 2: –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        print("\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #2: –ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï –ò –°–¢–†–ê–¢–ï–ì–ò–Ø")
        print("-" * 60)
        try:
            summary = format_executive_summary(checklist)
            print(summary)
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—é–º–µ: {e}")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ 3: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        print("\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #3: –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê")
        print("-" * 60)
        try:
            tech_prep = format_technical_preparation(checklist)
            print(tech_prep)
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(tech_prep)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {e}")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ 4: –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        print("\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #4: –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê")
        print("-" * 60)
        try:
            behavioral = format_behavioral_preparation(checklist)
            print(behavioral)
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(behavioral)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {e}")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ 5: –ò–∑—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        print("\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #5: –ò–ó–£–ß–ï–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ò")
        print("-" * 60)
        try:
            company = format_company_research(checklist)
            print(company)
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(company)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ 6: –ò–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞
        print("\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #6: –ò–ó–£–ß–ï–ù–ò–ï –¢–ï–•–ù–ò–ß–ï–°–ö–û–ì–û –°–¢–ï–ö–ê")
        print("-" * 60)
        try:
            tech_stack = format_technical_stack_study(checklist)
            print(tech_stack)
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(tech_stack)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞: {e}")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ 7: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        print("\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #7: –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø")
        print("-" * 60)
        try:
            practical = format_practical_exercises(checklist)
            print(practical)
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(practical)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {e}")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ 8: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é
        print("\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #8: –ù–ê–°–¢–†–û–ô–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø –î–õ–Ø –ò–ù–¢–ï–†–í–¨–Æ")
        print("-" * 60)
        try:
            setup = format_interview_setup(checklist)
            print(setup)
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(setup)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ 9: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        print("\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #9: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø")
        print("-" * 60)
        try:
            additional = format_additional_actions(checklist)
            print(additional)
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(additional)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {e}")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ 10: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        print("\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #10: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ö–¢–û–†–´ –£–°–ü–ï–•–ê")
        print("-" * 60)
        try:
            success_factors = format_critical_success_factors(checklist)
            print(success_factors)
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(success_factors)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—Ö–∞: {e}")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π —Ö–µ–Ω–¥–ª–µ—Ä–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ö–µ–Ω–¥–ª–µ—Ä interview_checklist_handler.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

def analyze_telegram_formatting(checklist: ProfessionalInterviewChecklist):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram."""
    print(f"\n{'='*80}")
    print(f"üì± –ê–ù–ê–õ–ò–ó –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø TELEGRAM")
    print(f"{'='*80}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        from src.tg_bot.handlers.spec_handlers.interview_checklist_handler import (
            format_professional_checklist_header,
            format_executive_summary,
            format_technical_preparation,
            format_behavioral_preparation,
            format_company_research,
            format_technical_stack_study,
            format_practical_exercises,
            format_interview_setup,
            format_additional_actions,
            format_critical_success_factors
        )
        
        messages = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            messages.append(("–ó–∞–≥–æ–ª–æ–≤–æ–∫", format_professional_checklist_header(checklist)))
            messages.append(("–†–µ–∑—é–º–µ", format_executive_summary(checklist)))
            messages.append(("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞", format_technical_preparation(checklist)))
            messages.append(("–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞", format_behavioral_preparation(checklist)))
            messages.append(("–ò–∑—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", format_company_research(checklist)))
            messages.append(("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫", format_technical_stack_study(checklist)))
            messages.append(("–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", format_practical_exercises(checklist)))
            messages.append(("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è", format_interview_setup(checklist)))
            messages.append(("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", format_additional_actions(checklist)))
            messages.append(("–§–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞", format_critical_success_factors(checklist)))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return
        
        print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        total_length = sum(len(msg[1]) for msg in messages)
        print(f"   ‚Ä¢ –û–±—â–∞—è –¥–ª–∏–Ω–∞: {total_length:,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        print(f"\nüìè –î–õ–ò–ù–ê –°–û–û–ë–©–ï–ù–ò–ô:")
        max_telegram_length = 4096  # –õ–∏–º–∏—Ç Telegram
        
        for name, content in messages:
            length = len(content)
            status = "‚úÖ" if length <= max_telegram_length else "‚ö†Ô∏è"
            print(f"   ‚Ä¢ {name}: {length:,} —Å–∏–º–≤–æ–ª–æ–≤ {status}")
            
            if length > max_telegram_length:
                print(f"     ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram –Ω–∞ {length - max_telegram_length} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTML-—Ç–µ–≥–æ–≤
        print(f"\nüè∑ –ê–ù–ê–õ–ò–ó HTML-–¢–ï–ì–û–í:")
        html_tags = ['<b>', '</b>', '<i>', '</i>', '<code>', '</code>', '<pre>', '</pre>']
        
        for name, content in messages:
            tag_count = sum(content.count(tag) for tag in html_tags)
            if tag_count > 0:
                print(f"   ‚Ä¢ {name}: {tag_count} HTML-—Ç–µ–≥–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–æ–¥–∑–∏
        print(f"\nüòä –ê–ù–ê–õ–ò–ó –≠–ú–û–î–ó–ò:")
        emoji_patterns = ['üìã', 'üéØ', 'üè¢', 'üë§', 'üíº', 'üèó', '‚è±', 'üî¥', 'üü°', '‚úÖ', '‚ùå', 'üîß', 'üí°', 'üìö', 'üé≠', 'üè™', 'üé™', '‚öôÔ∏è', 'üéØ']
        
        total_emojis = 0
        for name, content in messages:
            emoji_count = sum(content.count(emoji) for emoji in emoji_patterns)
            total_emojis += emoji_count
            if emoji_count > 0:
                print(f"   ‚Ä¢ {name}: {emoji_count} —ç–º–æ–¥–∑–∏")
        
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —ç–º–æ–¥–∑–∏: {total_emojis}")
        
        # –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
        print(f"\nüöÄ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –û–¢–ü–†–ê–í–ö–ï:")
        
        oversized_messages = [name for name, content in messages if len(content) > max_telegram_length]
        
        if not oversized_messages:
            print("   ‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏–º–∏—Ç–∞–º Telegram")
        else:
            print(f"   ‚ö†Ô∏è {len(oversized_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–≤—ã—à–∞—é—Ç –ª–∏–º–∏—Ç:")
            for name in oversized_messages:
                print(f"     - {name}")
        
        print("   ‚úÖ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   ‚úÖ –≠–º–æ–¥–∑–∏ –¥–æ–±–∞–≤–ª—è—é—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞."""
    print("üöÄ –ó–ê–ü–£–°–ö –û–¢–õ–ê–î–ö–ò INTERVIEW CHECKLIST HANDLER")
    print("="*80)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    # –ü—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    current_dir = Path(__file__).parent
    result_file = current_dir / "debug_response_interview_checklist.json"
    
    print(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑: {result_file.name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not result_file.exists():
        print(f"‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {result_file}")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python tests/debug_interview_checklist_response.py")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    checklist = load_interview_checklist_result(str(result_file))
    
    if not checklist:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ–∫-–ª–∏—Å—Ç–∞")
        return
    
    print(f"‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:")
    print(f"   ‚Ä¢ –ü–æ–∑–∏—Ü–∏—è: {checklist.position_title}")
    print(f"   ‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: {checklist.company_name}")
    print(f"   ‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {len(checklist.technical_preparation) + len(checklist.behavioral_preparation) + len(checklist.company_research) + len(checklist.technical_stack_study) + len(checklist.practical_exercises) + len(checklist.interview_setup) + len(checklist.additional_actions)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    show_all_formatted_messages(checklist)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram
    analyze_telegram_formatting(checklist)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*80}")
    print(f"üéâ –û–¢–õ–ê–î–ö–ê –•–ï–ù–î–õ–ï–†–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print(f"{'='*80}")
    print("üìã –ò–¢–û–ì–ò:")
    print("   ‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    print("   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram")
    print("   ‚úÖ HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–ª–Ω–∞—è")
    print("\nüí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –ø–æ–ª–Ω—ã–π workflow –±–æ—Ç–∞")

if __name__ == "__main__":
    main()