#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—Ç–≤–µ—Ç–∞ LLM –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é.
–í—ã–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ–∫-–ª–∏—Å—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
1. –û—Ç–≤–µ—Ç –æ—Ç LLM –≤ Pydantic —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
2. JSON –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
3. –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –ø–æ–ª—è–º –º–æ–¥–µ–ª–∏
4. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø–æ–ª–Ω–æ—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞
5. –°—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å–µ—Ö 7 –±–ª–æ–∫–æ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python tests/debug_interview_checklist_response.py
"""

import json
import sys
import asyncio
from pathlib import Path
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from src.parsers.resume_extractor import ResumeExtractor
from src.parsers.vacancy_extractor import VacancyExtractor
from src.llm_interview_checklist.llm_interview_checklist_generator import LLMInterviewChecklistGenerator
from src.models.interview_checklist_models import ProfessionalInterviewChecklist
from src.utils.logging_config import setup_logging

def load_json_file(file_path: str) -> Optional[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
        return None

def show_checklist_structure(checklist: ProfessionalInterviewChecklist) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ –ø–æ–ª—è–º."""
    print("\n" + "="*80)
    print("üìã –°–¢–†–£–ö–¢–£–†–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ß–ï–ö-–õ–ò–°–¢–ê –ü–û–î–ì–û–¢–û–í–ö–ò –ö –ò–ù–¢–ï–†–í–¨–Æ")
    print("="*80)
    
    try:
        print("üî∏ –û–¶–ï–ù–ö–ê –í–†–ï–ú–ï–ù–ò –ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï:")
        time_estimates = checklist.time_estimates
        print(f"   ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {time_estimates.total_time_needed}")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏: {time_estimates.critical_tasks_time}")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –Ω–∞ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏: {time_estimates.important_tasks_time}")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –Ω–∞ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏: {time_estimates.optional_tasks_time}")
        print(f"   ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É: {time_estimates.daily_schedule_suggestion[:50]}...")
        
        print("\nüî∏ –ö–û–ù–¢–ï–ö–°–¢ –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–ò:")
        context = checklist.personalization_context
        print(f"   ‚Ä¢ –ü–æ–∑–∏—Ü–∏—è: {checklist.position_title}")
        print(f"   ‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: {checklist.company_name}")
        print(f"   ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {context.candidate_level.value}")
        print(f"   ‚Ä¢ –¢–∏–ø –≤–∞–∫–∞–Ω—Å–∏–∏: {context.vacancy_type.value}")
        print(f"   ‚Ä¢ –§–æ—Ä–º–∞—Ç –∫–æ–º–ø–∞–Ω–∏–∏: {context.company_format.value}")
        print(f"   ‚Ä¢ –í—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤: {len(context.key_gaps_identified)}")
        print(f"   ‚Ä¢ –°–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω: {len(context.candidate_strengths)}")
        
        print("\nüî∏ –ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï –ò –°–¢–†–ê–¢–ï–ì–ò–Ø:")
        print(f"   ‚Ä¢ –î–ª–∏–Ω–∞ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ: {len(checklist.executive_summary)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   ‚Ä¢ –î–ª–∏–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {len(checklist.preparation_strategy)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("\nüî∏ –ë–õ–û–ö 1: –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê")
        tech_prep = checklist.technical_preparation
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(tech_prep)}")
        categories = {}
        for item in tech_prep:
            cat = item.category
            categories[cat] = categories.get(cat, 0) + 1
        for cat, count in categories.items():
            print(f"   ‚Ä¢ {cat}: {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        print("\nüî∏ –ë–õ–û–ö 2: –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê")
        behav_prep = checklist.behavioral_preparation
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(behav_prep)}")
        total_questions = sum(len(item.example_questions) for item in behav_prep)
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
        
        print("\nüî∏ –ë–õ–û–ö 3: –ò–ó–£–ß–ï–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ò")
        company_research = checklist.company_research
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(company_research)}")
        total_actions = sum(len(item.specific_actions) for item in company_research)
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {total_actions}")
        
        print("\nüî∏ –ë–õ–û–ö 4: –ò–ó–£–ß–ï–ù–ò–ï –¢–ï–•–ù–ò–ß–ï–°–ö–û–ì–û –°–¢–ï–ö–ê")
        tech_stack = checklist.technical_stack_study
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(tech_stack)}")
        
        print("\nüî∏ –ë–õ–û–ö 5: –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø")
        practical = checklist.practical_exercises
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(practical)}")
        difficulty_levels = {}
        for item in practical:
            level = item.difficulty_level
            difficulty_levels[level] = difficulty_levels.get(level, 0) + 1
        for level, count in difficulty_levels.items():
            print(f"   ‚Ä¢ {level}: {count} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
        
        print("\nüî∏ –ë–õ–û–ö 6: –ù–ê–°–¢–†–û–ô–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø")
        interview_setup = checklist.interview_setup
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {len(interview_setup)}")
        total_checklist_items = sum(len(item.checklist_items) for item in interview_setup)
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—É–Ω–∫—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–∞: {total_checklist_items}")
        
        print("\nüî∏ –ë–õ–û–ö 7: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø")
        additional = checklist.additional_actions
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {len(additional)}")
        total_steps = sum(len(item.implementation_steps) for item in additional)
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_steps}")
        
        print("\nüî∏ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞: {len(checklist.critical_success_factors)}")
        print(f"   ‚Ä¢ –û—à–∏–±–∫–∏ –¥–ª—è –∏–∑–±–µ–≥–∞–Ω–∏—è: {len(checklist.common_mistakes_to_avoid)}")
        print(f"   ‚Ä¢ –ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–Ω—É—Ç—ã: {len(checklist.last_minute_checklist)}")
        print(f"   ‚Ä¢ –î–ª–∏–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(checklist.motivation_boost)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")

def analyze_checklist_quality(checklist: ProfessionalInterviewChecklist) -> None:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏ –ø–æ–ª–Ω–æ—Ç—É —á–µ–∫-–ª–∏—Å—Ç–∞."""
    print("\n" + "="*80)
    print("üéØ –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ò –ü–û–õ–ù–û–¢–´ –ß–ï–ö-–õ–ò–°–¢–ê")
    print("="*80)
    
    try:
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö –º–µ—Ç—Ä–∏–∫
        total_items = (
            len(checklist.technical_preparation) +
            len(checklist.behavioral_preparation) +
            len(checklist.company_research) +
            len(checklist.technical_stack_study) +
            len(checklist.practical_exercises) +
            len(checklist.interview_setup) +
            len(checklist.additional_actions)
        )
        
        print("üìä –û–ë–©–ò–ï –ú–ï–¢–†–ò–ö–ò:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —á–µ–∫-–ª–∏—Å—Ç–µ: {total_items}")
        print(f"   ‚Ä¢ –í—Å–µ 7 –±–ª–æ–∫–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: {'‚úÖ' if total_items > 0 else '‚ùå'}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
        priorities = {"–ö–†–ò–¢–ò–ß–ù–û": 0, "–í–ê–ñ–ù–û": 0, "–ñ–ï–õ–ê–¢–ï–õ–¨–ù–û": 0}
        
        for item in checklist.technical_preparation:
            priorities[item.priority.value] = priorities.get(item.priority.value, 0) + 1
        
        for item in checklist.company_research:
            priorities[item.priority.value] = priorities.get(item.priority.value, 0) + 1
            
        for item in checklist.additional_actions:
            priorities[item.urgency.value] = priorities.get(item.urgency.value, 0) + 1
        
        print("\nüéØ –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–Ø:")
        for priority, count in priorities.items():
            print(f"   ‚Ä¢ {priority}: {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç–∏
        has_resources = sum(1 for item in checklist.technical_preparation if item.specific_resources)
        has_time_estimates = sum(1 for item in checklist.technical_preparation if item.estimated_time)
        
        print("\nüîç –ö–û–ù–ö–†–ï–¢–ù–û–°–¢–¨:")
        print(f"   ‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç—ã —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏: {has_resources}/{len(checklist.technical_preparation)}")
        print(f"   ‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏: {has_time_estimates}/{len(checklist.technical_preparation)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        content = checklist.model_dump_json()
        personalized_indicators = content.lower().count("–∫–∞–Ω–¥–∏–¥–∞—Ç") + content.lower().count("–≤–∞—à") + content.lower().count("–≤–∞–º")
        
        print("\nüë§ –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø:")
        print(f"   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è: {personalized_indicators} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        print(f"   ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {'–í—ã—Å–æ–∫–∏–π' if personalized_indicators > 20 else '–°—Ä–µ–¥–Ω–∏–π' if personalized_indicators > 10 else '–ù–∏–∑–∫–∏–π'}")
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã
        completeness_score = 0
        if len(checklist.technical_preparation) >= 5: completeness_score += 1
        if len(checklist.behavioral_preparation) >= 4: completeness_score += 1
        if len(checklist.company_research) >= 3: completeness_score += 1
        if len(checklist.practical_exercises) >= 5: completeness_score += 1
        if len(checklist.critical_success_factors) >= 3: completeness_score += 1
        
        print("\n‚úÖ –û–¶–ï–ù–ö–ê –ü–û–õ–ù–û–¢–´:")
        print(f"   ‚Ä¢ –ë–∞–ª–ª—ã –ø–æ–ª–Ω–æ—Ç—ã: {completeness_score}/5")
        print(f"   ‚Ä¢ –û—Ü–µ–Ω–∫–∞: {'–û—Ç–ª–∏—á–Ω–∞—è' if completeness_score >= 4 else '–•–æ—Ä–æ—à–∞—è' if completeness_score >= 3 else '–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")

def show_sample_content(checklist: ProfessionalInterviewChecklist) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞."""
    print("\n" + "="*80)
    print("üìù –ü–†–ò–ú–ï–†–´ –ö–û–ù–¢–ï–ù–¢–ê –ò–ó –ö–ê–ñ–î–û–ì–û –ë–õ–û–ö–ê")
    print("="*80)
    
    try:
        if checklist.technical_preparation:
            print("üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç):")
            item = checklist.technical_preparation[0]
            print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category}")
            print(f"   ‚Ä¢ –ó–∞–¥–∞—á–∞: {item.task_title}")
            print(f"   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {item.priority.value}")
            print(f"   ‚Ä¢ –í—Ä–µ–º—è: {item.estimated_time}")
            print(f"   ‚Ä¢ –†–µ—Å—É—Ä—Å—ã: {len(item.specific_resources)} —à—Ç.")
        
        if checklist.behavioral_preparation:
            print("\nüíº –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç):")
            item = checklist.behavioral_preparation[0]
            print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category}")
            print(f"   ‚Ä¢ –ó–∞–¥–∞—á–∞: {item.task_title}")
            print(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(item.example_questions)}")
            if item.example_questions:
                print(f"   ‚Ä¢ –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: {item.example_questions[0][:100]}...")
        
        if checklist.company_research:
            print("\nüè¢ –ò–ó–£–ß–ï–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ò (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç):")
            item = checklist.company_research[0]
            print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category}")
            print(f"   ‚Ä¢ –ó–∞–¥–∞—á–∞: {item.task_title}")
            print(f"   ‚Ä¢ –î–µ–π—Å—Ç–≤–∏–π: {len(item.specific_actions)}")
            print(f"   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {item.priority.value}")
        
        if checklist.practical_exercises:
            print("\nüéØ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç):")
            item = checklist.practical_exercises[0]
            print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category}")
            print(f"   ‚Ä¢ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {item.exercise_title}")
            print(f"   ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {item.difficulty_level}")
            print(f"   ‚Ä¢ –†–µ—Å—É—Ä—Å–æ–≤: {len(item.practice_resources)}")
        
        print("\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ö–¢–û–†–´ –£–°–ü–ï–•–ê:")
        for i, factor in enumerate(checklist.critical_success_factors[:3], 1):
            print(f"   {i}. {factor}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")

async def test_interview_checklist_generation():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é."""
    print("üöÄ –ó–ê–ü–£–°–ö –û–¢–õ–ê–î–ö–ò INTERVIEW CHECKLIST RESPONSE")
    print("="*80)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    # –ü—É—Ç–∏ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–∞–º
    current_dir = Path(__file__).parent
    resume_path = current_dir / "test_models_res_vac" / "fetched_resume_6d807532ff0ed6b79f0039ed1f63386d724a62.json"
    vacancy_path = current_dir / "test_models_res_vac" / "fetched_vacancy_120234346.json"
    
    print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   ‚Ä¢ –†–µ–∑—é–º–µ: {resume_path.name}")
    print(f"   ‚Ä¢ –í–∞–∫–∞–Ω—Å–∏—è: {vacancy_path.name}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    raw_resume = load_json_file(str(resume_path))
    raw_vacancy = load_json_file(str(vacancy_path))
    
    if not raw_resume or not raw_vacancy:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìã –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        resume_extractor = ResumeExtractor()
        vacancy_extractor = VacancyExtractor()
        
        parsed_resume = resume_extractor.extract_resume_info(raw_resume)
        parsed_vacancy = vacancy_extractor.extract_vacancy_info(raw_vacancy)
        
        resume_dict = parsed_resume.model_dump()
        vacancy_dict = parsed_vacancy.model_dump()
        
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω—ã")
        print(f"   ‚Ä¢ –†–µ–∑—é–º–µ: {resume_dict.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        print(f"   ‚Ä¢ –í–∞–∫–∞–Ω—Å–∏—è: {vacancy_dict.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞
    print("\nüß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é...")
    try:
        generator = LLMInterviewChecklistGenerator()
        checklist = await generator.generate_professional_interview_checklist(resume_dict, vacancy_dict)
        
        if not checklist:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç")
            return
            
        print("‚úÖ –ß–µ–∫-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞: {e}")
        return
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    show_checklist_structure(checklist)
    analyze_checklist_quality(checklist)
    show_sample_content(checklist)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ JSON
    output_file = current_dir / "debug_response_interview_checklist.json"
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(checklist.model_dump(), f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file.name}")
        print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {output_file.stat().st_size:,} –±–∞–π—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*80)
    print("üéâ –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
    print("="*80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    
    checklist_json = checklist.model_dump_json()
    print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä JSON: {len(checklist_json):,} —Å–∏–º–≤–æ–ª–æ–≤")
    print("   ‚Ä¢ –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: 7 (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö)")
    total_elements = (len(checklist.technical_preparation) + len(checklist.behavioral_preparation) + 
                     len(checklist.company_research) + len(checklist.technical_stack_study) + 
                     len(checklist.practical_exercises) + len(checklist.interview_setup) + 
                     len(checklist.additional_actions))
    print(f"   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_elements}")
    print("   ‚Ä¢ –ú–æ–¥–µ–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ProfessionalInterviewChecklist ‚úÖ")
    print("   ‚Ä¢ –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ: ‚úÖ")

if __name__ == "__main__":
    asyncio.run(test_interview_checklist_generation())