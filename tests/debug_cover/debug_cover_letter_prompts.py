#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
1. –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (system)
2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç (user) 
3. –ü–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ messages –¥–ª—è OpenAI API
4. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏
5. –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python tests/debug_cover_letter/debug_cover_letter_prompts.py
"""

import json
import sys
from pathlib import Path
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from src.parsers.resume_extractor import ResumeExtractor
from src.parsers.vacancy_extractor import VacancyExtractor
from src.llm_cover_letter.llm_cover_letter_generator import EnhancedLLMCoverLetterGenerator
from src.llm_cover_letter.formatter import (
    format_resume_for_cover_letter,
    format_vacancy_for_cover_letter,
    format_cover_letter_context
)
from src.utils.logging_config import setup_logging

def load_json_file(file_path: str) -> Optional[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
        return None

def debug_system_prompt(resume_json_path: str, vacancy_json_path: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞."""
    print("\n" + "="*80)
    print("ü§ñ –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ (SYSTEM)")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    raw_resume = load_json_file(resume_json_path)
    raw_vacancy = load_json_file(vacancy_json_path)
    
    if not (raw_resume and raw_vacancy):
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    resume_extractor = ResumeExtractor()
    vacancy_extractor = VacancyExtractor()
    
    parsed_resume = resume_extractor.extract_resume_info(raw_resume)
    parsed_vacancy = vacancy_extractor.extract_vacancy_info(raw_vacancy)
    
    if not (parsed_resume and parsed_vacancy):
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        cover_letter_generator = EnhancedLLMCoverLetterGenerator()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –¥–∞–Ω–Ω—ã–µ –≤ dict —Ñ–æ—Ä–º–∞—Ç–µ
        resume_dict = parsed_resume.model_dump()
        vacancy_dict = parsed_vacancy.model_dump()
        context = cover_letter_generator._analyze_vacancy_context(vacancy_dict)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        system_prompt = cover_letter_generator._create_system_prompt(context, resume_dict, vacancy_dict)
        
        print(system_prompt)
        print(f"\nüìä –î–ª–∏–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")

def debug_formatted_data(resume_json_path: str, vacancy_json_path: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏."""
    print("\n" + "="*80)
    print("üìÑ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    raw_resume = load_json_file(resume_json_path)
    raw_vacancy = load_json_file(vacancy_json_path)
    
    if not (raw_resume and raw_vacancy):
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—Å–µ—Ä—ã
    resume_extractor = ResumeExtractor()
    vacancy_extractor = VacancyExtractor()
    
    parsed_resume = resume_extractor.extract_resume_info(raw_resume)
    parsed_vacancy = vacancy_extractor.extract_vacancy_info(raw_vacancy)
    
    if not (parsed_resume and parsed_vacancy):
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        resume_dict = parsed_resume.model_dump()
        vacancy_dict = parsed_vacancy.model_dump()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –≥–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã
        formatted_resume = format_resume_for_cover_letter(resume_dict)
        formatted_vacancy = format_vacancy_for_cover_letter(vacancy_dict)
        formatted_context = format_cover_letter_context(resume_dict, vacancy_dict)
        
        print("üî∏ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–û–ï –†–ï–ó–Æ–ú–ï (–≤ USER –ø—Ä–æ–º–ø—Ç–µ):")
        print("-" * 40)
        print(formatted_resume)
        print(f"üìä –î–ª–∏–Ω–∞: {len(formatted_resume)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("\nüî∏ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–ê–Ø –í–ê–ö–ê–ù–°–ò–Ø (–≤ USER –ø—Ä–æ–º–ø—Ç–µ):")
        print("-" * 40)
        print(formatted_vacancy)
        print(f"üìä –î–ª–∏–Ω–∞: {len(formatted_vacancy)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("\nüî∏ –ö–û–ù–¢–ï–ö–°–¢ –î–õ–Ø –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–ò (–≤ SYSTEM –ø—Ä–æ–º–ø—Ç–µ):")
        print("-" * 40)
        print(formatted_context)
        print(f"üìä –î–ª–∏–Ω–∞: {len(formatted_context)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("\nüí° –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:")
        print("   ‚Ä¢ –†–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏—è –∏–¥—É—Ç –≤ USER –ø—Ä–æ–º–ø—Ç")
        print("   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –≤ SYSTEM –ø—Ä–æ–º–ø—Ç–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def debug_vacancy_context(resume_json_path: str, vacancy_json_path: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏."""
    print("\n" + "="*80)
    print("üéØ –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ö–°–¢–ê –í–ê–ö–ê–ù–°–ò–ò")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    raw_resume = load_json_file(resume_json_path)
    raw_vacancy = load_json_file(vacancy_json_path)
    
    if not (raw_resume and raw_vacancy):
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    resume_extractor = ResumeExtractor()
    vacancy_extractor = VacancyExtractor()
    
    parsed_resume = resume_extractor.extract_resume_info(raw_resume)
    parsed_vacancy = vacancy_extractor.extract_vacancy_info(raw_vacancy)
    
    if not (parsed_resume and parsed_vacancy):
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        cover_letter_generator = EnhancedLLMCoverLetterGenerator()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
        vacancy_dict = parsed_vacancy.model_dump()
        context = cover_letter_generator._analyze_vacancy_context(vacancy_dict)
        
        print("üî∏ –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê –ö–û–ù–¢–ï–ö–°–¢–ê:")
        print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏: {context['company_size']}")
        print(f"   ‚Ä¢ –¢–∏–ø —Ä–æ–ª–∏: {context['role_type']}")
        print(f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {context['company_name']}")
        print(f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {context['position_title']}")
        
        print("\nüî∏ –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:")
        description = vacancy_dict.get('description', '').lower()
        position = vacancy_dict.get('title', '').lower()
        
        print(f"   ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ({len(description)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: '{position}'")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        startup_words = ['—Å—Ç–∞—Ä—Ç–∞–ø', 'startup', '–º–æ–ª–æ–¥–∞—è –∫–æ–º–∞–Ω–¥–∞']
        enterprise_words = ['–∫—Ä—É–ø–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è', 'enterprise', '–∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è']
        large_words = ['–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è', 'global', '–±–æ–ª–µ–µ 1000']
        
        print(f"\nüî∏ –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –í –û–ü–ò–°–ê–ù–ò–ò:")
        for word_list, category in [(startup_words, "STARTUP"), (enterprise_words, "ENTERPRISE"), (large_words, "LARGE")]:
            found_words = [word for word in word_list if word in description]
            if found_words:
                print(f"   ‚Ä¢ {category}: {found_words}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")

def debug_user_prompt(resume_json_path: str, vacancy_json_path: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞."""
    print("\n" + "="*80)
    print("üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ü–†–û–ú–ü–¢ (USER)")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    raw_resume = load_json_file(resume_json_path)
    raw_vacancy = load_json_file(vacancy_json_path)
    
    if not (raw_resume and raw_vacancy):
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—Å–µ—Ä—ã
    resume_extractor = ResumeExtractor()
    vacancy_extractor = VacancyExtractor()
    
    parsed_resume = resume_extractor.extract_resume_info(raw_resume)
    parsed_vacancy = vacancy_extractor.extract_vacancy_info(raw_vacancy)
    
    if not (parsed_resume and parsed_vacancy):
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        cover_letter_generator = EnhancedLLMCoverLetterGenerator()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        resume_dict = parsed_resume.model_dump()
        vacancy_dict = parsed_vacancy.model_dump()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        user_prompt = cover_letter_generator._create_user_prompt(resume_dict, vacancy_dict)
        
        print(user_prompt)
        print(f"\nüìä –î–ª–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")

def debug_full_messages(resume_json_path: str, vacancy_json_path: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ messages –∫–∞–∫ –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ OpenAI API."""
    print("\n" + "="*80)
    print("üì® –ü–û–õ–ù–´–ô –ú–ê–°–°–ò–í MESSAGES –î–õ–Ø OPENAI API")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    raw_resume = load_json_file(resume_json_path)
    raw_vacancy = load_json_file(vacancy_json_path)
    
    if not (raw_resume and raw_vacancy):
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    resume_extractor = ResumeExtractor()
    vacancy_extractor = VacancyExtractor()
    
    parsed_resume = resume_extractor.extract_resume_info(raw_resume)
    parsed_vacancy = vacancy_extractor.extract_vacancy_info(raw_vacancy)
    
    if not (parsed_resume and parsed_vacancy):
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        cover_letter_generator = EnhancedLLMCoverLetterGenerator()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict
        resume_dict = parsed_resume.model_dump()
        vacancy_dict = parsed_vacancy.model_dump()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∫–∞–∫ –≤ generate_enhanced_cover_letter
        context = cover_letter_generator._analyze_vacancy_context(vacancy_dict)
        system_prompt = cover_letter_generator._create_system_prompt(context, resume_dict, vacancy_dict)
        user_prompt = cover_letter_generator._create_user_prompt(resume_dict, vacancy_dict)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º messages –∫–∞–∫ –≤ generate_enhanced_cover_letter
        messages = [
            {
                "role": "system",
                "content": system_prompt
            },
            {
                "role": "user",
                "content": user_prompt
            }
        ]
        
        # –í—ã–≤–æ–¥–∏–º –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ API
        print("```json")
        print(json.dumps(messages, ensure_ascii=False, indent=2))
        print("```")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        system_length = len(system_prompt)
        user_length = len(user_prompt)
        total_length = system_length + user_length
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê MESSAGES:")
        print(f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        print(f"  ‚Ä¢ –î–ª–∏–Ω–∞ system –ø—Ä–æ–º–ø—Ç–∞: {system_length} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  ‚Ä¢ –î–ª–∏–Ω–∞ user –ø—Ä–æ–º–ø—Ç–∞: {user_length} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  ‚Ä¢ –û–±—â–∞—è –¥–ª–∏–Ω–∞: {total_length} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è messages: {e}")

def debug_prompt_components(resume_json_path: str, vacancy_json_path: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–º–ø—Ç–∞ –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    print("\n" + "="*80)
    print("üîç –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ü–†–û–ú–ü–¢–ê –ü–û –ß–ê–°–¢–Ø–ú")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    raw_resume = load_json_file(resume_json_path)
    raw_vacancy = load_json_file(vacancy_json_path)
    
    if not (raw_resume and raw_vacancy):
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    resume_extractor = ResumeExtractor()
    vacancy_extractor = VacancyExtractor()
    
    parsed_resume = resume_extractor.extract_resume_info(raw_resume)
    parsed_vacancy = vacancy_extractor.extract_vacancy_info(raw_vacancy)
    
    if not (parsed_resume and parsed_vacancy):
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        cover_letter_generator = EnhancedLLMCoverLetterGenerator()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict
        resume_dict = parsed_resume.model_dump()
        vacancy_dict = parsed_vacancy.model_dump()
        
        print("üî∏ 1. –î–ê–ù–ù–´–ï –ü–û–°–õ–ï –ü–ê–†–°–ò–ù–ì–ê:")
        print(f"   ‚Ä¢ ResumeInfo: {type(parsed_resume)}")
        print(f"   ‚Ä¢ VacancyInfo: {type(parsed_vacancy)}")
        
        print("\nüî∏ 2. –î–ê–ù–ù–´–ï –ü–û–°–õ–ï model_dump():")
        print(f"   ‚Ä¢ resume_dict –∫–ª—é—á–∏: {list(resume_dict.keys())}")
        print(f"   ‚Ä¢ vacancy_dict –∫–ª—é—á–∏: {list(vacancy_dict.keys())}")
        
        print("\nüî∏ 3. –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ú–ï–¢–û–î–´ –ö–õ–ê–°–°–ê:")
        print(f"   ‚Ä¢ cover_letter_generator._analyze_vacancy_context(vacancy_dict)")
        print(f"   ‚Ä¢ cover_letter_generator._create_system_prompt(context, resume_dict, vacancy_dict)")
        print(f"   ‚Ä¢ cover_letter_generator._create_user_prompt(resume_dict, vacancy_dict)")
        
        print("\nüî∏ 4. –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –§–û–†–ú–ê–¢–¢–ï–†–´:")
        print(f"   ‚Ä¢ format_resume_for_cover_letter(resume_dict)")
        print(f"   ‚Ä¢ format_vacancy_for_cover_letter(vacancy_dict)")
        print(f"   ‚Ä¢ format_cover_letter_context(resume_dict, vacancy_dict) - –í –°–ò–°–¢–ï–ú–ù–û–ú –ü–†–û–ú–ü–¢–ï")
        
        print("\nüî∏ 5. –ü–†–û–ú–ü–¢–´ –ì–û–¢–û–í–´ –ö –û–¢–ü–†–ê–í–ö–ï –í:")
        print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {cover_letter_generator.model}")
        print(f"   ‚Ä¢ Temperature: 0.5")
        print(f"   ‚Ä¢ Response format: EnhancedCoverLetter")
        print(f"   ‚Ä¢ API: beta.chat.completions.parse")
        
        print("\nüî∏ 6. –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:")
        print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö: EnhancedCoverLetter")
        print(f"   ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è: _validate_quality()")
        print(f"   ‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: format_for_email()")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞."""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(log_level="INFO")
    
    print("üìß –û–¢–õ–ê–î–ö–ê –ü–†–û–ú–ü–¢–û–í –°–û–ü–†–û–í–û–î–ò–¢–ï–õ–¨–ù–û–ì–û –ü–ò–°–¨–ú–ê")
    print("=" * 80)
    
    # ===============================================
    # –ù–ê–°–¢–†–û–ô–ö–ò –û–¢–õ–ê–î–ö–ò
    # ===============================================
    
    # –ü–£–¢–ò –ö JSON –§–ê–ô–õ–ê–ú
    resume_json_path = "/Users/mask/Documents/–ü—Ä–æ–µ—Ç—ã_2025/gpt_4_mini_hackaton_final/tests/test_models_res_vac/fetched_resume_6d807532ff0ed6b79f0039ed1f63386d724a62.json"      # üëà –£–ö–ê–ñ–ò–¢–ï –ü–£–¢–¨ –ö –†–ï–ó–Æ–ú–ï
    vacancy_json_path = "/Users/mask/Documents/–ü—Ä–æ–µ—Ç—ã_2025/gpt_4_mini_hackaton_final/tests/test_models_res_vac/fetched_vacancy_120234346.json"    # üëà –£–ö–ê–ñ–ò–¢–ï –ü–£–¢–¨ –ö –í–ê–ö–ê–ù–°–ò–ò
    
    # –§–õ–ê–ì–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø (True/False)
    show_system_prompt = False       # üëà –ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    show_formatted_data = False      # üëà –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    show_vacancy_context = False     # üëà –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    show_user_prompt = False         # üëà –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç  
    show_messages = True            # üëà –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ messages
    show_components = True          # üëà –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–º–ø—Ç–∞
    
    # ===============================================
    
    try:
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if show_system_prompt:
            debug_system_prompt(resume_json_path, vacancy_json_path)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if show_formatted_data:
            debug_formatted_data(resume_json_path, vacancy_json_path)
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
        if show_vacancy_context:
            debug_vacancy_context(resume_json_path, vacancy_json_path)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
        if show_user_prompt:
            debug_user_prompt(resume_json_path, vacancy_json_path)
        
        # –ü–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ messages
        if show_messages:
            debug_full_messages(resume_json_path, vacancy_json_path)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–º–ø—Ç–∞
        if show_components:
            debug_prompt_components(resume_json_path, vacancy_json_path)
        
        print("\n" + "="*80)
        print("‚úÖ –û–¢–õ–ê–î–ö–ê –ü–†–û–ú–ü–¢–û–í –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("="*80)
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()