#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ HeadHunter API.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python tests/debug_parsing.py
"""

import json
import sys
import os
from pathlib import Path
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç—ã –ø–∞—Ä—Å–µ—Ä–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π
from src.parsers.resume_extractor import ResumeExtractor
from src.parsers.vacancy_extractor import VacancyExtractor
from src.utils.logging_config import setup_logging, get_logger

def load_json_file(file_path: str) -> Optional[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
        return None

def debug_resume_parsing(resume_json_path: str) -> None:
    """–û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—é–º–µ."""
    print("\n" + "="*80)
    print("üîç –û–¢–õ–ê–î–ö–ê –ü–ê–†–°–ò–ù–ì–ê –†–ï–ó–Æ–ú–ï")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
    raw_data = load_json_file(resume_json_path)
    if not raw_data:
        return
    
    print("\nüìÑ –ò–°–•–û–î–ù–´–ô JSON –†–ï–ó–Æ–ú–ï:")
    print(json.dumps(raw_data, ensure_ascii=False, indent=2))
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    extractor = ResumeExtractor()
    parsed_resume = extractor.extract_resume_info(raw_data)
    
    if parsed_resume:
        print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê –†–ï–ó–Æ–ú–ï:")
        print(json.dumps(parsed_resume.model_dump(), ensure_ascii=False, indent=2))
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–∑—é–º–µ!")

def debug_vacancy_parsing(vacancy_json_path: str) -> None:
    """–û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–∏."""
    print("\n" + "="*80)
    print("üéØ –û–¢–õ–ê–î–ö–ê –ü–ê–†–°–ò–ù–ì–ê –í–ê–ö–ê–ù–°–ò–ò")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
    raw_data = load_json_file(vacancy_json_path)
    if not raw_data:
        return
    
    print("\nüìÑ –ò–°–•–û–î–ù–´–ô JSON –í–ê–ö–ê–ù–°–ò–ò:")
    print(json.dumps(raw_data, ensure_ascii=False, indent=2))
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    extractor = VacancyExtractor()
    parsed_vacancy = extractor.extract_vacancy_info(raw_data)
    
    if parsed_vacancy:
        print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê –í–ê–ö–ê–ù–°–ò–ò:")
        print(json.dumps(parsed_vacancy.model_dump(), ensure_ascii=False, indent=2))
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∞–∫–∞–Ω—Å–∏–∏!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ª–∞–¥–∫–∏."""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(log_level="INFO")
    
    print("üöÄ –°–ö–†–ò–ü–¢ –û–¢–õ–ê–î–ö–ò –ü–ê–†–°–ò–ù–ì–ê –†–ï–ó–Æ–ú–ï –ò –í–ê–ö–ê–ù–°–ò–ô")
    print("=" * 80)
    
    # ===============================================
    # –ù–ê–°–¢–†–û–ô–ö–ò –û–¢–õ–ê–î–ö–ò
    # ===============================================
    
    # –ü–£–¢–ò –ö JSON –§–ê–ô–õ–ê–ú
    resume_json_path = "/Users/mask/Documents/–ü—Ä–æ–µ—Ç—ã_2025/gpt_4_mini_hackaton_final/tests/test_models_res_vac/fetched_resume_6d807532ff0ed6b79f0039ed1f63386d724a62.json"      # üëà –£–ö–ê–ñ–ò–¢–ï –ü–£–¢–¨ –ö –†–ï–ó–Æ–ú–ï
    vacancy_json_path = "/Users/mask/Documents/–ü—Ä–æ–µ—Ç—ã_2025/gpt_4_mini_hackaton_final/tests/test_models_res_vac/fetched_vacancy_120234346.json"    # üëà –£–ö–ê–ñ–ò–¢–ï –ü–£–¢–¨ –ö –í–ê–ö–ê–ù–°–ò–ò
    
    # –§–õ–ê–ì–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø (True/False)
    debug_resume = False      # üëà –û—Ç–ª–∞–∂–∏–≤–∞—Ç—å —Ä–µ–∑—é–º–µ
    debug_vacancy = True     # üëà –û—Ç–ª–∞–∂–∏–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
    
    # ===============================================
    
    try:
        # –û—Ç–ª–∞–¥–∫–∞ —Ä–µ–∑—é–º–µ
        if debug_resume:
            debug_resume_parsing(resume_json_path)
        
        # –û—Ç–ª–∞–¥–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏  
        if debug_vacancy:
            debug_vacancy_parsing(vacancy_json_path)
        
        print("\n" + "="*80)
        print("üéâ –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("="*80)
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()