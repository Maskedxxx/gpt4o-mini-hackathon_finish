#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ GAP-–∞–Ω–∞–ª–∏–∑–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
1. –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (system)
2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç (user) 
3. –ü–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ messages –¥–ª—è OpenAI API

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python tests/debug_gap/debug_gap_prompts.py
"""

import json
import sys
from pathlib import Path
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from src.parsers.resume_extractor import ResumeExtractor
from src.parsers.vacancy_extractor import VacancyExtractor
from src.llm_gap_analyzer.llm_gap_analyzer import LLMGapAnalyzer
from src.utils.logging_config import setup_logging

def load_json_file(file_path: str) -> Optional[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
        return None

def debug_system_prompt() -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç GAP-–∞–Ω–∞–ª–∏–∑–∞."""
    print("\n" + "="*80)
    print("ü§ñ –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ (SYSTEM)")
    print("="*80)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        gap_analyzer = LLMGapAnalyzer()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        system_prompt = gap_analyzer._create_system_prompt()
        
        print(system_prompt)
        print(f"\nüìä –î–ª–∏–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")

def debug_user_prompt(resume_json_path: str, vacancy_json_path: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç GAP-–∞–Ω–∞–ª–∏–∑–∞."""
    print("\n" + "="*80)
    print("üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ü–†–û–ú–ü–¢ (USER)")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    raw_resume = load_json_file(resume_json_path)
    raw_vacancy = load_json_file(vacancy_json_path)
    
    if not (raw_resume and raw_vacancy):
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—Å–µ—Ä—ã
    resume_extractor = ResumeExtractor()
    vacancy_extractor = VacancyExtractor()
    
    parsed_resume = resume_extractor.extract_resume_info(raw_resume)
    parsed_vacancy = vacancy_extractor.extract_vacancy_info(raw_vacancy)
    
    if not (parsed_resume and parsed_vacancy):
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        gap_analyzer = LLMGapAnalyzer()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        resume_dict = parsed_resume.model_dump()
        vacancy_dict = parsed_vacancy.model_dump()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        user_prompt = gap_analyzer._create_user_prompt(resume_dict, vacancy_dict)
        
        print(user_prompt)
        print(f"\nüìä –î–ª–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")

def debug_full_messages(resume_json_path: str, vacancy_json_path: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ messages –∫–∞–∫ –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ OpenAI API."""
    print("\n" + "="*80)
    print("üì® –ü–û–õ–ù–´–ô –ú–ê–°–°–ò–í MESSAGES –î–õ–Ø OPENAI API")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    raw_resume = load_json_file(resume_json_path)
    raw_vacancy = load_json_file(vacancy_json_path)
    
    if not (raw_resume and raw_vacancy):
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    resume_extractor = ResumeExtractor()
    vacancy_extractor = VacancyExtractor()
    
    parsed_resume = resume_extractor.extract_resume_info(raw_resume)
    parsed_vacancy = vacancy_extractor.extract_vacancy_info(raw_vacancy)
    
    if not (parsed_resume and parsed_vacancy):
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        gap_analyzer = LLMGapAnalyzer()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict
        resume_dict = parsed_resume.model_dump()
        vacancy_dict = parsed_vacancy.model_dump()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∫–∞–∫ –≤ gap_analysis –º–µ—Ç–æ–¥–µ
        system_prompt = gap_analyzer._create_system_prompt()
        user_prompt = gap_analyzer._create_user_prompt(resume_dict, vacancy_dict)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º messages –∫–∞–∫ –≤ gap_analysis
        messages = [
            {
                "role": "system",
                "content": system_prompt
            },
            {
                "role": "user", 
                "content": user_prompt
            }
        ]
        
        # –í—ã–≤–æ–¥–∏–º –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ API
        print("```json")
        print(json.dumps(messages, ensure_ascii=False, indent=2))
        print("```")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_length = len(system_prompt) + len(user_prompt)
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê MESSAGES:")
        print(f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        print(f"  ‚Ä¢ –î–ª–∏–Ω–∞ system –ø—Ä–æ–º–ø—Ç–∞: {len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  ‚Ä¢ –î–ª–∏–Ω–∞ user –ø—Ä–æ–º–ø—Ç–∞: {len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  ‚Ä¢ –û–±—â–∞—è –¥–ª–∏–Ω–∞: {total_length} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è messages: {e}")

def debug_prompt_components(resume_json_path: str, vacancy_json_path: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–º–ø—Ç–∞ –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    print("\n" + "="*80)
    print("üîç –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ü–†–û–ú–ü–¢–ê –ü–û –ß–ê–°–¢–Ø–ú")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    raw_resume = load_json_file(resume_json_path)
    raw_vacancy = load_json_file(vacancy_json_path)
    
    if not (raw_resume and raw_vacancy):
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    resume_extractor = ResumeExtractor()
    vacancy_extractor = VacancyExtractor()
    
    parsed_resume = resume_extractor.extract_resume_info(raw_resume)
    parsed_vacancy = vacancy_extractor.extract_vacancy_info(raw_vacancy)
    
    if not (parsed_resume and parsed_vacancy):
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        gap_analyzer = LLMGapAnalyzer()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict
        resume_dict = parsed_resume.model_dump()
        vacancy_dict = parsed_vacancy.model_dump()
        
        print("üî∏ 1. –î–ê–ù–ù–´–ï –ü–û–°–õ–ï –ü–ê–†–°–ò–ù–ì–ê:")
        print(f"   ‚Ä¢ ResumeInfo: {type(parsed_resume)}")
        print(f"   ‚Ä¢ VacancyInfo: {type(parsed_vacancy)}")
        
        print("\nüî∏ 2. –î–ê–ù–ù–´–ï –ü–û–°–õ–ï model_dump():")
        print(f"   ‚Ä¢ resume_dict –∫–ª—é—á–∏: {list(resume_dict.keys())}")
        print(f"   ‚Ä¢ vacancy_dict –∫–ª—é—á–∏: {list(vacancy_dict.keys())}")
        
        print("\nüî∏ 3. –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ú–ï–¢–û–î–´ –ö–õ–ê–°–°–ê:")
        print("   ‚Ä¢ gap_analyzer._create_system_prompt()")
        print("   ‚Ä¢ gap_analyzer._create_user_prompt(resume_dict, vacancy_dict)")
        
        print("\nüî∏ 4. –ü–†–û–ú–ü–¢–´ –ì–û–¢–û–í–´ –ö –û–¢–ü–†–ê–í–ö–ï –í:")
        print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {gap_analyzer.model}")
        print("   ‚Ä¢ Temperature: 0.2")
        print("   ‚Ä¢ Response format: EnhancedResumeTailoringAnalysis")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ GAP-–∞–Ω–∞–ª–∏–∑–∞."""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(log_level="INFO")
    
    print("üîç –û–¢–õ–ê–î–ö–ê –ü–†–û–ú–ü–¢–û–í GAP-–ê–ù–ê–õ–ò–ó–ê")
    print("=" * 80)
    
    # ===============================================
    # –ù–ê–°–¢–†–û–ô–ö–ò –û–¢–õ–ê–î–ö–ò
    # ===============================================
    
    # –ü–£–¢–ò –ö JSON –§–ê–ô–õ–ê–ú
    resume_json_path = "/Users/mask/Documents/–ü—Ä–æ–µ—Ç—ã_2025/gpt_4_mini_hackaton_final/tests/test_models_res_vac/fetched_resume_6d807532ff0ed6b79f0039ed1f63386d724a62.json"    # üëà –£–ö–ê–ñ–ò–¢–ï –ü–£–¢–¨ –ö –†–ï–ó–Æ–ú–ï
    vacancy_json_path = "/Users/mask/Documents/–ü—Ä–æ–µ—Ç—ã_2025/gpt_4_mini_hackaton_final/tests/test_models_res_vac/fetched_vacancy_120234346.json"    # üëà –£–ö–ê–ñ–ò–¢–ï –ü–£–¢–¨ –ö –í–ê–ö–ê–ù–°–ò–ò
    
    # –§–õ–ê–ì–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø (True/False)
    show_system_prompt = True      # üëà –ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    show_user_prompt = True        # üëà –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç  
    show_messages = True           # üëà –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ messages
    show_components = True         # üëà –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–º–ø—Ç–∞
    
    # ===============================================
    
    try:
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if show_system_prompt:
            debug_system_prompt()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
        if show_user_prompt:
            debug_user_prompt(resume_json_path, vacancy_json_path)
        
        # –ü–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ messages
        if show_messages:
            debug_full_messages(resume_json_path, vacancy_json_path)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–º–ø—Ç–∞
        if show_components:
            debug_prompt_components(resume_json_path, vacancy_json_path)
        
        print("\n" + "="*80)
        print("‚úÖ –û–¢–õ–ê–î–ö–ê –ü–†–û–ú–ü–¢–û–í –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("="*80)
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()