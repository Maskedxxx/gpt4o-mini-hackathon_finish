#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–±–∞–≥–≥–µ—Ä —Ö–µ–Ω–¥–ª–µ—Ä–∞ GAP-–∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è Telegram.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç GAP-–∞–Ω–∞–ª–∏–∑–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞.
–î–≤–∞ —Ä–µ–∂–∏–º–∞: —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python tests/debug_gap/debug_gap_handler.py
"""

import json
import sys
from pathlib import Path
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from src.models.gap_analysis_models import EnhancedResumeTailoringAnalysis
from src.utils.logging_config import setup_logging

def load_gap_analysis_result(file_path: str) -> Optional[EnhancedResumeTailoringAnalysis]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç GAP-–∞–Ω–∞–ª–∏–∑–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º Pydantic –æ–±—ä–µ–∫—Ç –∏–∑ JSON
        gap_result = EnhancedResumeTailoringAnalysis.model_validate(data)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç GAP-–∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {file_path}")
        return gap_result
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞: {e}")
        return None

def modify_display_limits_for_unlimited():
    """–í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç –ª–∏–º–∏—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Ö–µ–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    from src.tg_bot.handlers.spec_handlers import gap_analyzer_handler
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    original_limits = gap_analyzer_handler.DISPLAY_LIMITS.copy()
    original_symbols = gap_analyzer_handler.DISPLAY_SYMBOLS.copy()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª—å—à–∏–µ –ª–∏–º–∏—Ç—ã (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
    gap_analyzer_handler.DISPLAY_LIMITS.update({
        'max_requirements_per_group': 999,    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        'max_recommendations_per_group': 999, # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        'max_strengths_display': 999,         # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        'max_gaps_display': 999,              # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã
        'requirement_text_length': 999,       # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        'gap_description_length': 999,        # –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
        'example_wording_length': 999,        # –ü–æ–ª–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        'recommendation_issue_length': 999,   # –ü–æ–ª–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    })
    
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
    gap_analyzer_handler.DISPLAY_SYMBOLS['ellipsis'] = ''
    
    return original_limits, original_symbols

def restore_display_limits(original_limits, original_symbols):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    from src.tg_bot.handlers.spec_handlers import gap_analyzer_handler
    
    gap_analyzer_handler.DISPLAY_LIMITS.update(original_limits)
    gap_analyzer_handler.DISPLAY_SYMBOLS.update(original_symbols)

def show_all_formatted_messages(gap_result: EnhancedResumeTailoringAnalysis, with_limits: bool = True):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–∞
    from src.tg_bot.handlers.spec_handlers.gap_analyzer_handler import (
        format_enhanced_gap_analysis_preview,
        format_primary_screening,
        format_requirements_analysis,
        format_quality_assessment,
        format_recommendations,
        format_final_conclusion
    )
    
    limit_status = "–° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø–ú–ò" if with_limits else "–ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô"
    print(f"\n{'='*80}")
    print(f"üì± –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ({limit_status})")
    print(f"{'='*80}")
    
    # –ß–∞—Å—Ç—å 1: –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä
    print(f"\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #1: –ö–†–ê–¢–ö–ò–ô –û–ë–ó–û–†")
    print("-" * 60)
    preview = format_enhanced_gap_analysis_preview(gap_result)
    print(preview)
    
    # –ß–∞—Å—Ç—å 2: –ü–µ—Ä–≤–∏—á–Ω—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥
    print(f"\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #2: –ü–ï–†–í–ò–ß–ù–´–ô –°–ö–†–ò–ù–ò–ù–ì")
    print("-" * 60)
    screening = format_primary_screening(gap_result)
    print(screening)
    
    # –ß–∞—Å—Ç—å 3: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    print(f"\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #3: –ê–ù–ê–õ–ò–ó –¢–†–ï–ë–û–í–ê–ù–ò–ô")
    print("-" * 60)
    requirements = format_requirements_analysis(gap_result)
    if requirements:
        print(requirements)
    else:
        print("‚ùå –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç")
    
    # –ß–∞—Å—Ç—å 4: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    print(f"\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #4: –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê")
    print("-" * 60)
    quality = format_quality_assessment(gap_result)
    print(quality)
    
    # –ß–∞—Å—Ç—å 5: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #5: –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("-" * 60)
    recommendations = format_recommendations(gap_result)
    print(recommendations)
    
    # –ß–∞—Å—Ç—å 6: –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
    print(f"\nüîπ –°–û–û–ë–©–ï–ù–ò–ï #6: –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´")
    print("-" * 60)
    conclusion = format_final_conclusion(gap_result)
    print(conclusion)

def show_statistics(gap_result: EnhancedResumeTailoringAnalysis):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É GAP-–∞–Ω–∞–ª–∏–∑–∞."""
    print(f"\n{'='*80}")
    print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê GAP-–ê–ù–ê–õ–ò–ó–ê")
    print(f"{'='*80}")
    
    print(f"üìã –ö–û–õ–ò–ß–ï–°–¢–í–û –≠–õ–ï–ú–ï–ù–¢–û–í:")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {len(gap_result.requirements_analysis)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º
    must_have = [r for r in gap_result.requirements_analysis if r.requirement_type == "MUST_HAVE"]
    nice_to_have = [r for r in gap_result.requirements_analysis if r.requirement_type == "NICE_TO_HAVE"]
    bonus = [r for r in gap_result.requirements_analysis if r.requirement_type == "BONUS"]
    
    print(f"    - MUST_HAVE: {len(must_have)}")
    print(f"    - NICE_TO_HAVE: {len(nice_to_have)}")
    print(f"    - BONUS: {len(bonus)}")
    
    print(f"  ‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(gap_result.critical_recommendations)}")
    print(f"  ‚Ä¢ –í–∞–∂–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(gap_result.important_recommendations)}")
    print(f"  ‚Ä¢ –ñ–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(gap_result.optional_recommendations)}")
    print(f"  ‚Ä¢ –°–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω: {len(gap_result.key_strengths)}")
    print(f"  ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤: {len(gap_result.major_gaps)}")
    
    print(f"\nüìè –î–õ–ò–ù–ê –¢–ï–ö–°–¢–û–í:")
    
    # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤
    if gap_result.requirements_analysis:
        req_lengths = [len(r.requirement_text) for r in gap_result.requirements_analysis]
        print(f"  ‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è - –º–∞–∫—Å: {max(req_lengths)}, –º–∏–Ω: {min(req_lengths)}, —Å—Ä–µ–¥–Ω–µ–µ: {sum(req_lengths)//len(req_lengths)}")
        
        gap_descriptions = [len(r.gap_description or "") for r in gap_result.requirements_analysis if r.gap_description]
        if gap_descriptions:
            print(f"  ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ - –º–∞–∫—Å: {max(gap_descriptions)}, –º–∏–Ω: {min(gap_descriptions)}, —Å—Ä–µ–¥–Ω–µ–µ: {sum(gap_descriptions)//len(gap_descriptions)}")
    
    if gap_result.critical_recommendations:
        issue_lengths = [len(r.issue_description) for r in gap_result.critical_recommendations]
        print(f"  ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º - –º–∞–∫—Å: {max(issue_lengths)}, –º–∏–Ω: {min(issue_lengths)}, —Å—Ä–µ–¥–Ω–µ–µ: {sum(issue_lengths)//len(issue_lengths)}")
    
    print(f"\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
    print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {gap_result.overall_match_percentage}%")
    print(f"  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –Ω–∞–π–º—É: {gap_result.hiring_recommendation}")
    print(f"  ‚Ä¢ –û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ: {gap_result.quality_assessment.overall_impression}")
    print(f"  ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞: {gap_result.primary_screening.overall_screening_result}")

def show_current_limits():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    from src.tg_bot.handlers.spec_handlers.gap_analyzer_handler import DISPLAY_LIMITS, DISPLAY_SYMBOLS
    
    print(f"\n{'='*80}")
    print(f"‚öôÔ∏è –¢–ï–ö–£–©–ò–ï –õ–ò–ú–ò–¢–´ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø")
    print(f"{'='*80}")
    
    print(f"üî¢ –õ–ò–ú–ò–¢–´ –ö–û–õ–ò–ß–ï–°–¢–í–ê:")
    print(f"  ‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ: {DISPLAY_LIMITS['max_requirements_per_group']}")
    print(f"  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –≥—Ä—É–ø–ø–µ: {DISPLAY_LIMITS['max_recommendations_per_group']}")
    print(f"  ‚Ä¢ –°–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω: {DISPLAY_LIMITS['max_strengths_display']}")
    print(f"  ‚Ä¢ –ü—Ä–æ–±–µ–ª–æ–≤: {DISPLAY_LIMITS['max_gaps_display']}")
    
    print(f"\n‚úÇÔ∏è –õ–ò–ú–ò–¢–´ –î–õ–ò–ù–´ –¢–ï–ö–°–¢–ê:")
    print(f"  ‚Ä¢ –¢–µ–∫—Å—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {DISPLAY_LIMITS['requirement_text_length']} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"  ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–∞: {DISPLAY_LIMITS['gap_description_length']} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"  ‚Ä¢ –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏: {DISPLAY_LIMITS['example_wording_length']} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"  ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {DISPLAY_LIMITS['recommendation_issue_length']} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print(f"\nüé® –°–ò–ú–í–û–õ–´ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø:")
    print(f"  ‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –±–ª–æ–∫: '{DISPLAY_SYMBOLS['progress_filled']}'")
    print(f"  ‚Ä¢ –ü—É—Å—Ç–æ–π –±–ª–æ–∫: '{DISPLAY_SYMBOLS['progress_empty']}'")
    print(f"  ‚Ä¢ –ú–Ω–æ–≥–æ—Ç–æ—á–∏–µ: '{DISPLAY_SYMBOLS['ellipsis']}'")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–±–∞–≥–≥–µ—Ä–∞ —Ö–µ–Ω–¥–ª–µ—Ä–∞ GAP-–∞–Ω–∞–ª–∏–∑–∞."""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(log_level="INFO")
    
    print("üîç –î–ï–ë–ê–ì–ì–ï–† –•–ï–ù–î–õ–ï–†–ê GAP-–ê–ù–ê–õ–ò–ó–ê")
    print("=" * 80)
    
    # ===============================================
    # –ù–ê–°–¢–†–û–ô–ö–ò –û–¢–õ–ê–î–ö–ò
    # ===============================================
    
    # –ü–£–¢–¨ –ö JSON –§–ê–ô–õ–£ –° –†–ï–ó–£–õ–¨–¢–ê–¢–û–ú GAP-–ê–ù–ê–õ–ò–ó–ê
    gap_result_json_path = "/Users/mask/Documents/–ü—Ä–æ–µ—Ç—ã_2025/gpt_4_mini_hackaton_final/tests/debug_response_gap.json"    # üëà –£–ö–ê–ñ–ò–¢–ï –ü–£–¢–¨ –ö JSON –†–ï–ó–£–õ–¨–¢–ê–¢–£
    
    # –§–õ–ê–ì–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø (True/False)
    show_with_limits = True        # üëà –ü–æ–∫–∞–∑–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
    show_without_limits = True     # üëà –ü–æ–∫–∞–∑–∞—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç)
    show_stats = True              # üëà –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    show_limits_config = True      # üëà –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
    
    # ===============================================
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç GAP-–∞–Ω–∞–ª–∏–∑–∞
        gap_result = load_gap_analysis_result(gap_result_json_path)
        if not gap_result:
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if show_stats:
            show_statistics(gap_result)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
        if show_limits_config:
            show_current_limits()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
        if show_with_limits:
            show_all_formatted_messages(gap_result, with_limits=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç)
        if show_without_limits:
            # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            original_limits, original_symbols = modify_display_limits_for_unlimited()
            
            try:
                show_all_formatted_messages(gap_result, with_limits=False)
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
                restore_display_limits(original_limits, original_symbols)
        
        print(f"\n{'='*80}")
        print("‚úÖ –î–ï–ë–ê–ì–ì–ï–† –•–ï–ù–î–õ–ï–†–ê –ó–ê–í–ï–†–®–ï–ù!")
        print("="*80)
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –°—Ä–∞–≤–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∏—Ç–∞–µ–º—ã –≤ Telegram")
        print("4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ª–∏–º–∏—Ç—ã –≤ DISPLAY_LIMITS")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()