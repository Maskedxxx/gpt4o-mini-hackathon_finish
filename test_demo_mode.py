#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –¥–∞–Ω–Ω—ã–º —Ä–µ–∑—é–º–µ
2. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–µ–º–æ –∏ –æ–±—ã—á–Ω—ã–º —Ä–µ–∂–∏–º–∞–º–∏
3. –ó–∞–≥—Ä—É–∑–∫—É –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
4. Fallback –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ LLM –≤—ã–∑–æ–≤—ã

–ó–∞–ø—É—Å–∫:
    python test_demo_mode.py
"""

import os
import asyncio
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from src.demo_cache.demo_manager import DemoManager
from src.llm_cover_letter.llm_cover_letter_generator import EnhancedLLMCoverLetterGenerator
from src.llm_interview_checklist.llm_interview_checklist_generator import LLMInterviewChecklistGenerator
from src.llm_interview_simulation.llm_interview_simulator import ProfessionalInterviewSimulator
from src.utils import get_logger

logger = get_logger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_RESUMES = {
    "junior_candidate": {
        "first_name": "–ò–≤–∞–Ω",
        "last_name": "–ò–≤–∞–Ω–æ–≤", 
        "total_experience": 6,  # 6 –º–µ—Å—è—Ü–µ–≤
        "position_title": "Junior Python Developer",
        "skills": ["Python", "Django", "Git"],
        "experience": [{"company": "StartupTech", "position": "Junior Developer", "period": "6 –º–µ—Å—è—Ü–µ–≤"}]
    },
    "middle_candidate": {
        "first_name": "–ï–ª–µ–Ω–∞",
        "last_name": "–°–∏–¥–æ—Ä–æ–≤–∞",
        "total_experience": 30,  # 2.5 –≥–æ–¥–∞
        "position_title": "Python Developer", 
        "skills": ["Python", "Django", "FastAPI", "PostgreSQL", "Docker"],
        "experience": [{"company": "TechCorp", "position": "Python Developer", "period": "2 –≥–æ–¥–∞"}]
    },
    "senior_candidate": {
        "first_name": "–°–µ—Ä–≥–µ–π", 
        "last_name": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ–≤",
        "total_experience": 72,  # 6 –ª–µ—Ç
        "position_title": "Senior Python Developer",
        "skills": ["Python", "Django", "FastAPI", "PostgreSQL", "Docker", "Kubernetes", "Architecture"],
        "experience": [{"company": "Enterprise", "position": "Senior Developer", "period": "4 –≥–æ–¥–∞"}]
    }
}

TEST_VACANCY = {
    "id": "test123",
    "name": "Python Developer",
    "employer": {"name": "TestCompany"},
    "description": "Test vacancy for Python developer position"
}

class DemoModeTest:
    """–¢–µ—Å—Ç–µ—Ä –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞"""
    
    def __init__(self):
        self.demo_manager = DemoManager()
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞...")
        
        tests = [
            ("–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø—Ä–æ—Ñ–∏–ª—è", self.test_profile_detection),
            ("–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤", self.test_mode_switching),
            ("–¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤", self.test_response_caching),
            ("–¢–µ—Å—Ç PDF —Ñ–∞–π–ª–æ–≤", self.test_pdf_files),
            ("–¢–µ—Å—Ç LLM —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ", self.test_llm_services_demo),
            ("–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞", self.test_cache_statistics)
        ]
        
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            logger.info(f"\nüìã {test_name}")
            try:
                result = await test_func()
                if result:
                    logger.info("  ‚úÖ PASSED")
                    passed += 1
                else:
                    logger.error("  ‚ùå FAILED")
            except Exception as e:
                logger.error(f"  üí• ERROR: {e}")
        
        logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return passed == total
    
    async def test_profile_detection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            for candidate_type, resume_data in TEST_RESUMES.items():
                detected_level = self.demo_manager.detect_profile_level(resume_data)
                expected_level = candidate_type.split('_')[0]  # junior, middle, senior
                
                logger.info(f"  {candidate_type}: {detected_level} (–æ–∂–∏–¥–∞–ª—Å—è {expected_level})")
                
                if detected_level != expected_level:
                    logger.warning(f"    ‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—è –¥–ª—è {candidate_type}")
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return False
    
    async def test_mode_switching(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            original_demo_mode = os.getenv("DEMO_MODE", "false")
            
            # –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            os.environ["DEMO_MODE"] = "false"
            assert not self.demo_manager.is_demo_mode(), "–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            logger.info("  ‚úì –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
            os.environ["DEMO_MODE"] = "true"
            assert self.demo_manager.is_demo_mode(), "–î–µ–º–æ-—Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            logger.info("  ‚úì –î–µ–º–æ-—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            os.environ["DEMO_MODE"] = original_demo_mode
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤: {e}")
            return False
    
    async def test_response_caching(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            test_response = {
                "test_field": "test_value",
                "timestamp": "2024-01-01T00:00:00"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            self.demo_manager.save_response("cover_letter", "junior", test_response)
            logger.info("  ‚úì –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            loaded_response = self.demo_manager.load_cached_response("cover_letter", "junior")
            assert loaded_response == test_response, "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
            logger.info("  ‚úì –û—Ç–≤–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
            missing_response = self.demo_manager.load_cached_response("nonexistent", "junior")
            assert missing_response is None, "–î–æ–ª–∂–µ–Ω –±—ã–ª –≤–µ—Ä–Ω—É—Ç—å None –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"
            logger.info("  ‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    async def test_pdf_files(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É PDF —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            for service_type in ["cover_letter", "interview_checklist", "interview_simulation"]:
                pdf_dir = self.demo_manager.generated_pdfs_dir / service_type
                if not pdf_dir.exists():
                    logger.warning(f"  ‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {pdf_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    continue
                
                for level in ["junior", "middle", "senior"]:
                    pdf_path = self.demo_manager.get_pdf_path(service_type, level)
                    if pdf_path and Path(pdf_path).exists():
                        logger.info(f"  ‚úì PDF –Ω–∞–π–¥–µ–Ω: {service_type}/{level}")
                    else:
                        logger.warning(f"  ‚ö†Ô∏è PDF –Ω–µ –Ω–∞–π–¥–µ–Ω: {service_type}/{level}")
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ PDF —Ñ–∞–π–ª–æ–≤: {e}")
            return False
    
    async def test_llm_services_demo(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É LLM —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ"""
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        os.environ["DEMO_MODE"] = "true"
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
            cover_letter_gen = EnhancedLLMCoverLetterGenerator()
            checklist_gen = LLMInterviewChecklistGenerator()
            simulation_gen = ProfessionalInterviewSimulator()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å —Å junior –ø—Ä–æ—Ñ–∏–ª–µ–º
            junior_resume = TEST_RESUMES["junior_candidate"]
            
            # Cover Letter
            logger.info("  üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º cover letter...")
            cover_letter = await cover_letter_gen.generate_enhanced_cover_letter(
                junior_resume, TEST_VACANCY
            )
            if cover_letter:
                logger.info("    ‚úì Cover letter —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.warning("    ‚ö†Ô∏è Cover letter –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # Interview Checklist
            logger.info("  üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º interview checklist...")
            checklist = await checklist_gen.generate_professional_interview_checklist(
                junior_resume, TEST_VACANCY
            )
            if checklist:
                logger.info("    ‚úì Checklist —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.warning("    ‚ö†Ô∏è Checklist –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # Interview Simulation (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à)
            logger.info("  üé≠ –¢–µ—Å—Ç–∏—Ä—É–µ–º interview simulation...")
            simulation = await simulation_gen.simulate_interview(
                junior_resume, TEST_VACANCY
            )
            if simulation:
                logger.info("    ‚úì Simulation —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                logger.warning("    ‚ö†Ô∏è Simulation –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ LLM —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
            os.environ["DEMO_MODE"] = "false"
    
    async def test_cache_statistics(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞"""
        try:
            stats = self.demo_manager.get_cache_stats()
            
            logger.info(f"  üìä –†–µ–∂–∏–º: {'DEMO' if stats['demo_mode_active'] else 'LIVE'}")
            logger.info(f"  üìä –í—Å–µ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['total_cached_responses']}")
            logger.info(f"  üìä –í—Å–µ–≥–æ PDF —Ñ–∞–π–ª–æ–≤: {stats['total_generated_pdfs']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            required_keys = ["demo_mode_active", "cached_responses", "generated_pdfs", 
                           "total_cached_responses", "total_generated_pdfs"]
            
            for key in required_keys:
                assert key in stats, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {key} –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
            
            logger.info("  ‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ AI Resume Assistant - Demo Mode Tester")
    print("=" * 50)
    
    tester = DemoModeTest()
    success = await tester.run_all_tests()
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
    print("1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–µ—à–∞:")
    print("   export DEMO_MODE=false")
    print("   python generate_demo_cache.py")
    print("\n2. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞:")
    print("   export DEMO_MODE=true")
    print("   python run_unified_app.py")
    print("\n3. –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º:")
    print("   export DEMO_MODE=false")
    print("   python run_unified_app.py")

if __name__ == "__main__":
    asyncio.run(main())