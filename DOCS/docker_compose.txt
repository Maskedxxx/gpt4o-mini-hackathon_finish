# AI Resume Assistant Bot - Docker Compose Configuration
# This file defines the complete application stack for production deployment

version: '3.8'

services:
  # OAuth Callback Server
  # Handles HeadHunter OAuth authentication callbacks
  callback-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: resume-bot:latest
    container_name: resume-bot-callback
    command: python -m src.callback_local_server.main
    
    ports:
      - "${CALLBACK_LOCAL_PORT:-8080}:8080"
    
    environment:
      # Callback server specific settings
      - CALLBACK_LOCAL_HOST=0.0.0.0
      - CALLBACK_LOCAL_PORT=8080
      - APP_NAME=${APP_NAME:-Resume Bot Callback}
    
    env_file:
      - .env
    
    volumes:
      # Persistent logs
      - ./LOGS:/app/LOGS
      # Font files for PDF generation
      - ./fonts:/app/fonts:ro
    
    restart: unless-stopped
    
    # Health check to ensure service is running
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    
    networks:
      - resume-bot-network

  # Telegram Bot Service
  # Main bot application that handles user interactions
  telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile
    image: resume-bot:latest
    container_name: resume-bot-telegram
    command: python -m src.tg_bot.main
    
    depends_on:
      callback-server:
        condition: service_healthy
    
    environment:
      - APP_NAME=${APP_NAME:-Resume Bot Telegram}
    
    env_file:
      - .env
    
    volumes:
      # Persistent logs
      - ./LOGS:/app/LOGS
      # Font files for PDF generation
      - ./fonts:/app/fonts:ro
    
    restart: unless-stopped
    
    # Health check using Telegram API
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('https://api.telegram.org', timeout=10)"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s
    
    # Resource limits for main bot
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    
    networks:
      - resume-bot-network

  # Nginx Reverse Proxy (Optional)
  # Provides SSL termination and load balancing
  nginx:
    image: nginx:alpine
    container_name: resume-bot-nginx
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      # Nginx configuration
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      # SSL certificates (create these before deployment)
      - ./ssl:/etc/nginx/ssl:ro
      # Static files (if any)
      - ./static:/var/www/html:ro
    
    depends_on:
      - callback-server
    
    restart: unless-stopped
    
    # Health check for nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    
    networks:
      - resume-bot-network

  # Redis for caching and session storage (Optional - for scaling)
  redis:
    image: redis:7-alpine
    container_name: resume-bot-redis
    
    ports:
      - "6379:6379"
    
    volumes:
      # Persistent Redis data
      - redis_data:/data
      # Redis configuration
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    command: redis-server /usr/local/etc/redis/redis.conf
    
    restart: unless-stopped
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    
    networks:
      - resume-bot-network

  # PostgreSQL Database (Optional - for persistent storage)
  postgres:
    image: postgres:15-alpine
    container_name: resume-bot-postgres
    
    environment:
      - POSTGRES_DB=${DB_NAME:-resume_bot}
      - POSTGRES_USER=${DB_USER:-resume_bot}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    volumes:
      # Persistent database data
      - postgres_data:/var/lib/postgresql/data
      # Database initialization scripts
      - ./database/init:/docker-entrypoint-initdb.d:ro
    
    ports:
      - "5432:5432"
    
    restart: unless-stopped
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-resume_bot}"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    networks:
      - resume-bot-network

  # Prometheus monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: resume-bot-prometheus
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    restart: unless-stopped
    
    networks:
      - resume-bot-network

  # Grafana for metrics visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: resume-bot-grafana
    
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    depends_on:
      - prometheus
    
    restart: unless-stopped
    
    networks:
      - resume-bot-network

# Network configuration
networks:
  resume-bot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Persistent volumes
volumes:
  # Application logs (if you want them persistent across container restarts)
  app_logs:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/LOGS
      o: bind

  # Redis data
  redis_data:
    driver: local

  # PostgreSQL data
  postgres_data:
    driver: local

  # Prometheus data
  prometheus_data:
    driver: local

  # Grafana data
  grafana_data:
    driver: local

  # Font files
  font_files:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/fonts
      o: bind

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml (create this file for development)
version: '3.8'

services:
  callback-server:
    build:
      target: development
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    volumes:
      # Mount source code for hot reload in development
      - ./src:/app/src:ro
    ports:
      - "8080:8080"

  telegram-bot:
    build:
      target: development
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    volumes:
      # Mount source code for hot reload in development
      - ./src:/app/src:ro

  # Disable unnecessary services in development
  nginx:
    profiles: ["production"]
  
  prometheus:
    profiles: ["monitoring"]
  
  grafana:
    profiles: ["monitoring"]