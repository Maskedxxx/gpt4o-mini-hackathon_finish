# src/tg_bot/handlers/spec_handlers/interview_checklist_handler.py
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext

from src.tg_bot.utils import UserState
from src.tg_bot.utils import INTERVIEW_CHECKLIST_MESSAGES
from src.tg_bot.utils import authorized_keyboard
from src.llm_interview_checklist import LLMInterviewChecklistGenerator
from src.models.interview_checklist_models import InterviewChecklist

from src.utils import get_logger
logger = get_logger()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
llm_interview_checklist_generator = LLMInterviewChecklistGenerator()

def format_interview_checklist_result(checklist: InterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    result = "üìã <b>–ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ß–ï–ö-–õ–ò–°–¢ –ü–û–î–ì–û–¢–û–í–ö–ò –ö –ò–ù–¢–ï–†–í–¨–Æ</b>\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    result += f"üéØ <b>–ü–æ–∑–∏—Ü–∏—è:</b> {checklist.position_title}\n\n"
    result += f"üìä <b>–û–±–∑–æ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b>\n{checklist.preparation_overview}\n\n"
    result += f"‚è± <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b> {checklist.estimated_preparation_time}\n\n"
    
    return result

def format_technical_skills(checklist: InterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤."""
    if not checklist.technical_skills:
        return ""
    
    result = "üõ† <b>–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ù–ê–í–´–ö–ò –î–õ–Ø –ò–ó–£–ß–ï–ù–ò–Ø</b>\n\n"
    
    for i, skill in enumerate(checklist.technical_skills, 1):
        priority_emoji = {"–í—ã—Å–æ–∫–∏–π": "üî¥", "–°—Ä–µ–¥–Ω–∏–π": "üü°", "–ù–∏–∑–∫–∏–π": "üü¢"}.get(skill.priority, "‚ö™")
        
        result += f"<b>{i}. {skill.skill_name}</b> {priority_emoji}\n"
        result += f"üìà –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {skill.current_level_assessment}\n"
        result += f"üéØ –¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {skill.required_level}\n"
        result += f"üìö –ü–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è: {skill.study_plan}\n"
        
        if skill.resources:
            result += "üîó –†–µ—Å—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n"
            for res in skill.resources[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–µ—Å—É—Ä—Å–∞
                result += f"   ‚Ä¢ {res.title} ({res.estimated_time})\n"
                if res.url:
                    result += f"     {res.url}\n"
        result += "\n"
    
    return result

def format_theory_topics(checklist: InterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º."""
    if not checklist.theory_topics:
        return ""
    
    result = "üìñ <b>–¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–ú–´</b>\n\n"
    
    for i, topic in enumerate(checklist.theory_topics, 1):
        result += f"<b>{i}. {topic.topic_name}</b>\n"
        result += f"‚ùó –í–∞–∂–Ω–æ—Å—Ç—å: {topic.importance}\n"
        result += f"üìä –ì–ª—É–±–∏–Ω–∞ –∏–∑—É—á–µ–Ω–∏—è: {topic.estimated_depth}\n"
        
        if topic.key_concepts:
            result += "üîë –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:\n"
            for concept in topic.key_concepts[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
                result += f"   ‚Ä¢ {concept}\n"
        
        if topic.study_materials:
            result += "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:\n"
            for material in topic.study_materials[:2]:  # –ü–µ—Ä–≤—ã–µ 2 –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                result += f"   ‚Ä¢ {material.title} ({material.estimated_time})\n"
        result += "\n"
    
    return result

def format_practical_tasks(checklist: InterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á."""
    if not checklist.practical_tasks:
        return ""
    
    result = "üíª <b>–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò</b>\n\n"
    
    for i, task in enumerate(checklist.practical_tasks, 1):
        difficulty_emoji = {"–ù–∞—á–∞–ª—å–Ω—ã–π": "üü¢", "–°—Ä–µ–¥–Ω–∏–π": "üü°", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": "üî¥"}.get(task.difficulty_level, "‚ö™")
        
        result += f"<b>{i}. {task.task_title}</b> {difficulty_emoji}\n"
        result += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n"
        
        if task.examples:
            result += "üéØ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:\n"
            for example in task.examples[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞
                result += f"   ‚Ä¢ {example}\n"
        
        if task.practice_resources:
            result += "üéÆ –†–µ—Å—É—Ä—Å—ã –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏:\n"
            for res in task.practice_resources[:2]:  # –ü–µ—Ä–≤—ã–µ 2 —Ä–µ—Å—É—Ä—Å–∞
                result += f"   ‚Ä¢ {res.title}\n"
        result += "\n"
    
    return result

def format_behavioral_questions(checklist: InterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
    if not checklist.behavioral_questions:
        return ""
    
    result = "üó£ <b>–ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´</b>\n\n"
    
    for i, behavior in enumerate(checklist.behavioral_questions, 1):
        result += f"<b>{i}. {behavior.question_category}</b>\n"
        result += f"üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ: {behavior.preparation_tips}\n"
        
        if behavior.example_questions:
            result += "‚ùì –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
            for question in behavior.example_questions[:2]:  # –ü–µ—Ä–≤—ã–µ 2 –≤–æ–ø—Ä–æ—Å–∞
                result += f"   ‚Ä¢ {question}\n"
        result += "\n"
    
    return result

def format_final_recommendations(checklist: InterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    result = "üè¢ <b>–ò–ó–£–ß–ï–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ò</b>\n"
    result += f"{checklist.company_research_tips}\n\n"
    
    result += "üéØ <b>–§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò</b>\n"
    result += f"{checklist.final_recommendations}\n\n"
    
    result += "üçÄ <b>–£–¥–∞—á–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é!</b>"
    
    return result

async def start_interview_checklist_generation(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é."""
    user_id = message.from_user.id
    logger.info(f"–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    parsed_resume = user_data.get("parsed_resume")
    parsed_vacancy = user_data.get("parsed_vacancy")
    
    if not parsed_resume or not parsed_vacancy:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer(INTERVIEW_CHECKLIST_MESSAGES['generation_error'])
        await state.set_state(UserState.AUTHORIZED)
        return
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await message.answer(INTERVIEW_CHECKLIST_MESSAGES["generation_started"], reply_markup=authorized_keyboard)
    await state.set_state(UserState.INTERVIEW_CHECKLIST_GENERATION)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ–∫-–ª–∏—Å—Ç–∞
        checklist_result = await llm_interview_checklist_generator.generate_interview_checklist(parsed_resume, parsed_vacancy)
        
        if not checklist_result:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer(INTERVIEW_CHECKLIST_MESSAGES["generation_error"])
            await state.set_state(UserState.AUTHORIZED)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(interview_checklist=checklist_result.model_dump())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —á–∞—Å—Ç—è–º
        await send_checklist_in_parts(message, checklist_result)
        
        await state.set_state(UserState.AUTHORIZED)
        logger.info(f"–ß–µ–∫-–ª–∏—Å—Ç –∏–Ω—Ç–µ—Ä–≤—å—é —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
        await message.answer(INTERVIEW_CHECKLIST_MESSAGES["generation_error"])
        await state.set_state(UserState.AUTHORIZED)

async def send_checklist_in_parts(message: types.Message, checklist: InterviewChecklist):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ–∫-–ª–∏—Å—Ç –ø–æ —á–∞—Å—Ç—è–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç Telegram."""
    
    # –ß–∞—Å—Ç—å 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    part1 = format_interview_checklist_result(checklist)
    await message.answer(part1, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 2: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏
    part2 = format_technical_skills(checklist)
    if part2:
        await message.answer(part2, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 3: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã
    part3 = format_theory_topics(checklist)
    if part3:
        await message.answer(part3, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 4: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    part4 = format_practical_tasks(checklist)
    if part4:
        await message.answer(part4, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 5: –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    part5 = format_behavioral_questions(checklist)
    if part5:
        await message.answer(part5, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 6: –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    part6 = format_final_recommendations(checklist)
    await message.answer(part6, reply_markup=authorized_keyboard, parse_mode="HTML")