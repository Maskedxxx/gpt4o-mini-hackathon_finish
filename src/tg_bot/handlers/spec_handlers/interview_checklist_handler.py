# src/tg_bot/handlers/spec_handlers/interview_checklist_handler.py
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext

from src.tg_bot.utils import UserState
from src.tg_bot.utils import INTERVIEW_CHECKLIST_MESSAGES
from src.tg_bot.utils import authorized_keyboard
from src.llm_interview_checklist import LLMInterviewChecklistGenerator
from src.models.interview_checklist_models import (
    InterviewChecklist, 
    ProfessionalInterviewChecklist,
    CandidateLevel,
    VacancyType, 
    CompanyFormat,
    Priority
)

from src.utils import get_logger
logger = get_logger()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
llm_interview_checklist_generator = LLMInterviewChecklistGenerator()

# =============================================================================
# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞
# =============================================================================

def format_professional_checklist_header(checklist: ProfessionalInterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞."""
    result = "üìã <b>–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ß–ï–ö-–õ–ò–°–¢ –ü–û–î–ì–û–¢–û–í–ö–ò –ö –ò–ù–¢–ï–†–í–¨–Æ</b>\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    result += f"üéØ <b>–ü–æ–∑–∏—Ü–∏—è:</b> {checklist.position_title}\n"
    result += f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {checklist.company_name}\n\n"
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    context = checklist.personalization_context
    result += f"üë§ <b>–£—Ä–æ–≤–µ–Ω—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:</b> {context.candidate_level}\n"
    result += f"üíº <b>–¢–∏–ø –≤–∞–∫–∞–Ω—Å–∏–∏:</b> {context.vacancy_type}\n"
    result += f"üèó <b>–§–æ—Ä–º–∞—Ç –∫–æ–º–ø–∞–Ω–∏–∏:</b> {context.company_format}\n\n"
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
    time_est = checklist.time_estimates
    result += f"‚è± <b>–û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b> {time_est.total_time_needed}\n"
    result += f"üî¥ <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏:</b> {time_est.critical_tasks_time}\n"
    result += f"üü° <b>–í–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b> {time_est.important_tasks_time}\n\n"
    
    return result

def format_executive_summary(checklist: ProfessionalInterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é."""
    result = "üìä <b>–°–¢–†–ê–¢–ï–ì–ò–Ø –ü–û–î–ì–û–¢–û–í–ö–ò</b>\n\n"
    
    result += f"<b>üìã –†–µ–∑—é–º–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b>\n{checklist.executive_summary}\n\n"
    result += f"<b>üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b>\n{checklist.preparation_strategy}\n\n"
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ñ–æ–∫—É—Å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
    context = checklist.personalization_context
    if context.critical_focus_areas:
        result += "<b>üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Ñ–æ–∫—É—Å–∞:</b>\n"
        for area in context.critical_focus_areas[:3]:  # –ü–µ—Ä–≤—ã–µ 3
            result += f"‚Ä¢ {area}\n"
        result += "\n"
    
    return result

def format_technical_preparation(checklist: ProfessionalInterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–ª–æ–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏."""
    if not checklist.technical_preparation:
        return ""
    
    result = "üõ† <b>–ë–õ–û–ö 1: –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê</b>\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    by_category = {}
    for item in checklist.technical_preparation:
        category = item.category
        if category not in by_category:
            by_category[category] = []
        by_category[category].append(item)
    
    category_names = {
        "–ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ_–∑–Ω–∞–Ω–∏—è": "üìö –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è",
        "–Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ_—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üîß –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", 
        "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ_–∑–∞–¥–∞—á–∏": "üíª –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏",
        "–ø—Ä–æ–µ–∫—Ç—ã_–∫–æ–¥": "üìÇ –ü—Ä–æ–µ–∫—Ç—ã –∏ –∫–æ–¥",
        "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ_–º–∞—Ç–µ—Ä–∏–∞–ª—ã": "üìñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
    }
    
    for category, items in by_category.items():
        if items:
            result += f"<b>{category_names.get(category, category.upper())}</b>\n"
            
            for i, item in enumerate(items[:2], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                priority_emoji = {"–ö–†–ò–¢–ò–ß–ù–û": "üî¥", "–í–ê–ñ–ù–û": "üü°", "–ñ–ï–õ–ê–¢–ï–õ–¨–ù–û": "üü¢"}.get(item.priority, "‚ö™")
                
                result += f"{i}. <b>{item.task_title}</b> {priority_emoji}\n"
                result += f"   üìù {item.description[:100]}{'...' if len(item.description) > 100 else ''}\n"
                result += f"   ‚è± {item.estimated_time}\n"
                
                if item.specific_resources:
                    result += f"   üîó {item.specific_resources[0]}\n"  # –ü–µ—Ä–≤—ã–π —Ä–µ—Å—É—Ä—Å
                result += "\n"
            
            if len(items) > 2:
                result += f"   ... –∏ –µ—â–µ {len(items) - 2} –∑–∞–¥–∞—á\n\n"
    
    return result

def format_behavioral_preparation(checklist: ProfessionalInterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–ª–æ–∫ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏."""
    if not checklist.behavioral_preparation:
        return ""
    
    result = "üó£ <b>–ë–õ–û–ö 2: –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê</b>\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    by_category = {}
    for item in checklist.behavioral_preparation:
        category = item.category
        if category not in by_category:
            by_category[category] = []
        by_category[category].append(item)
    
    category_names = {
        "—Ç–∏–ø–æ–≤—ã–µ_–≤–æ–ø—Ä–æ—Å—ã": "‚ùì –¢–∏–ø–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
        "—Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è": "üé§ –°–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è",
        "–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–µ_–∏–Ω—Ç–µ—Ä–≤—å—é": "üë• –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "storytelling": "üìñ Storytelling"
    }
    
    for category, items in by_category.items():
        if items:
            result += f"<b>{category_names.get(category, category.upper())}</b>\n"
            
            for item in items[:1]:  # –ü–æ 1 –ø—Ä–∏–º–µ—Ä—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                result += f"üìå <b>{item.task_title}</b>\n"
                result += f"   {item.description[:120]}{'...' if len(item.description) > 120 else ''}\n"
                
                if item.example_questions:
                    result += f"   üí¨ –ü—Ä–∏–º–µ—Ä: {item.example_questions[0]}\n"
                result += "\n"
    
    return result

def format_company_research(checklist: ProfessionalInterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–ª–æ–∫ –∏–∑—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏."""
    if not checklist.company_research:
        return ""
    
    result = "üè¢ <b>–ë–õ–û–ö 3: –ò–ó–£–ß–ï–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    by_category = {}
    for item in checklist.company_research:
        category = item.category
        if category not in by_category:
            by_category[category] = []
        by_category[category].append(item)
    
    category_names = {
        "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏": "üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
        "–ø—Ä–æ–¥—É–∫—Ç—ã_–æ—Ç—Ä–∞—Å–ª—å": "üì± –ü—Ä–æ–¥—É–∫—Ç—ã –∏ –æ—Ç—Ä–∞—Å–ª—å",
        "–≤–æ–ø—Ä–æ—Å—ã_—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é": "‚ùì –í–æ–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é"
    }
    
    for category, items in by_category.items():
        if items:
            result += f"<b>{category_names.get(category, category.upper())}</b>\n"
            
            for item in items[:1]:  # –ü–æ 1 –ø—Ä–∏–º–µ—Ä—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                priority_emoji = {"–ö–†–ò–¢–ò–ß–ù–û": "üî¥", "–í–ê–ñ–ù–û": "üü°", "–ñ–ï–õ–ê–¢–ï–õ–¨–ù–û": "üü¢"}.get(item.priority, "‚ö™")
                
                result += f"üìå <b>{item.task_title}</b> {priority_emoji}\n"
                if item.specific_actions:
                    result += f"   ‚Ä¢ {item.specific_actions[0]}\n"
                result += f"   ‚è± {item.time_required}\n\n"
    
    return result

def format_technical_stack_study(checklist: ProfessionalInterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–ª–æ–∫ –∏–∑—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞."""
    if not checklist.technical_stack_study:
        return ""
    
    result = "üîß <b>–ë–õ–û–ö 4: –ò–ó–£–ß–ï–ù–ò–ï –¢–ï–•–ù–ò–ß–ï–°–ö–û–ì–û –°–¢–ï–ö–ê</b>\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    by_category = {}
    for item in checklist.technical_stack_study:
        category = item.category
        if category not in by_category:
            by_category[category] = []
        by_category[category].append(item)
    
    category_names = {
        "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è_–≤–∞–∫–∞–Ω—Å–∏–∏": "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏",
        "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏_–∫–æ–º–ø–∞–Ω–∏–∏": "üèó –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏",
        "—Ä–∞–±–æ—á–∏–µ_–ø—Ä–æ—Ü–µ—Å—Å—ã": "‚öôÔ∏è –†–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã",
        "—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è": "üìö –¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è"
    }
    
    for category, items in by_category.items():
        if items:
            result += f"<b>{category_names.get(category, category.upper())}</b>\n"
            
            for item in items[:2]:  # –ü–æ 2 –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                result += f"üìå <b>{item.task_title}</b>\n"
                result += f"   {item.description[:120]}{'...' if len(item.description) > 120 else ''}\n"
                result += f"   üí° {item.relevance_explanation[:80]}{'...' if len(item.relevance_explanation) > 80 else ''}\n\n"
    
    return result

def format_practical_exercises(checklist: ProfessionalInterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–ª–æ–∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π."""
    if not checklist.practical_exercises:
        return ""
    
    result = "üí™ <b>–ë–õ–û–ö 5: –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø</b>\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ
    by_difficulty = {"–±–∞–∑–æ–≤—ã–π": [], "—Å—Ä–µ–¥–Ω–∏–π": [], "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": []}
    
    for item in checklist.practical_exercises:
        difficulty = item.difficulty_level
        if difficulty in by_difficulty:
            by_difficulty[difficulty].append(item)
    
    difficulty_emoji = {"–±–∞–∑–æ–≤—ã–π": "üü¢", "—Å—Ä–µ–¥–Ω–∏–π": "üü°", "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": "üî¥"}
    
    for difficulty, items in by_difficulty.items():
        if items:
            result += f"<b>{difficulty_emoji[difficulty]} {difficulty.upper()}</b>\n"
            
            for item in items[:2]:  # –ü–æ 2 –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
                result += f"üìå <b>{item.exercise_title}</b>\n"
                result += f"   {item.description[:100]}{'...' if len(item.description) > 100 else ''}\n"
                if item.practice_resources:
                    result += f"   üîó {item.practice_resources[0]}\n"
                result += "\n"
    
    return result

def format_interview_setup(checklist: ProfessionalInterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é."""
    if not checklist.interview_setup:
        return ""
    
    result = "üñ• <b>–ë–õ–û–ö 6: –ù–ê–°–¢–†–û–ô–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø –î–õ–Ø –ò–ù–¢–ï–†–í–¨–Æ</b>\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    by_category = {}
    for item in checklist.interview_setup:
        category = item.category
        if category not in by_category:
            by_category[category] = []
        by_category[category].append(item)
    
    category_names = {
        "–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ_—Å–≤—è–∑—å": "üì± –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —Å–≤—è–∑—å",
        "–º–µ—Å—Ç–æ_–ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è": "üè† –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è",
        "–∞–∫–∫–∞—É–Ω—Ç—ã_–¥–æ—Å—Ç—É–ø—ã": "üîê –ê–∫–∫–∞—É–Ω—Ç—ã –∏ –¥–æ—Å—Ç—É–ø—ã",
        "—Ä–µ–∑–µ—Ä–≤–Ω—ã–µ_–≤–∞—Ä–∏–∞–Ω—Ç—ã": "üîÑ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
        "–≤–Ω–µ—à–Ω–∏–π_–≤–∏–¥": "üëî –í–Ω–µ—à–Ω–∏–π –≤–∏–¥"
    }
    
    for category, items in by_category.items():
        if items:
            result += f"<b>{category_names.get(category, category.upper())}</b>\n"
            
            for item in items[:1]:  # –ü–æ 1 –ø—Ä–∏–º–µ—Ä—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                result += f"üìå <b>{item.task_title}</b>\n"
                if item.checklist_items:
                    result += f"   ‚úÖ {item.checklist_items[0]}\n"
                    if len(item.checklist_items) > 1:
                        result += f"   ‚úÖ {item.checklist_items[1]}\n"
                result += "\n"
    
    return result

def format_additional_actions(checklist: ProfessionalInterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–ª–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."""
    if not checklist.additional_actions:
        return ""
    
    result = "üìù <b>–ë–õ–û–ö 7: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø</b>\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    by_category = {}
    for item in checklist.additional_actions:
        category = item.category
        if category not in by_category:
            by_category[category] = []
        by_category[category].append(item)
    
    category_names = {
        "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "üë• –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        "–ø—Ä–æ—Ñ–∏–ª–∏": "üíº –ü—Ä–æ—Ñ–∏–ª–∏ –∏ –æ–Ω–ª–∞–π–Ω-–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ",
        "–¥–æ–∫—É–º–µ–Ω—Ç—ã": "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã",
        "—Ä–µ–∑—é–º–µ_–ø–∏—Å—å–º–æ": "üìã –†–µ–∑—é–º–µ –∏ –ø–∏—Å—å–º–æ",
        "–Ω–∞—Å—Ç—Ä–æ–π_–æ—Ç–¥—ã—Ö": "üßò –ù–∞—Å—Ç—Ä–æ–π –∏ –æ—Ç–¥—ã—Ö"
    }
    
    for category, items in by_category.items():
        if items:
            result += f"<b>{category_names.get(category, category.upper())}</b>\n"
            
            for item in items[:1]:  # –ü–æ 1 –ø—Ä–∏–º–µ—Ä—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                urgency_emoji = {"–ö–†–ò–¢–ò–ß–ù–û": "üî¥", "–í–ê–ñ–ù–û": "üü°", "–ñ–ï–õ–ê–¢–ï–õ–¨–ù–û": "üü¢"}.get(item.urgency, "‚ö™")
                
                result += f"üìå <b>{item.action_title}</b> {urgency_emoji}\n"
                result += f"   {item.description[:100]}{'...' if len(item.description) > 100 else ''}\n"
                if item.implementation_steps:
                    result += f"   üî∏ {item.implementation_steps[0]}\n"
                result += "\n"
    
    return result

def format_critical_success_factors(checklist: ProfessionalInterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    result = "üéØ <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ö–¢–û–†–´ –£–°–ü–ï–•–ê</b>\n\n"
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    if checklist.critical_success_factors:
        for i, factor in enumerate(checklist.critical_success_factors[:3], 1):
            result += f"{i}. {factor}\n"
        result += "\n"
    
    # –û—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–µ–¥—É–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å
    if checklist.common_mistakes_to_avoid:
        result += "<b>‚ö†Ô∏è –ò–ó–ë–ï–ì–ê–ô–¢–ï –≠–¢–ò–• –û–®–ò–ë–û–ö:</b>\n"
        for mistake in checklist.common_mistakes_to_avoid[:3]:
            result += f"‚Ä¢ {mistake}\n"
        result += "\n"
    
    # –ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–Ω—É—Ç—ã
    if checklist.last_minute_checklist:
        result += "<b>‚è∞ –ü–û–°–õ–ï–î–ù–Ø–Ø –ú–ò–ù–£–¢–ê:</b>\n"
        for item in checklist.last_minute_checklist[:3]:
            result += f"‚úÖ {item}\n"
        result += "\n"
    
    # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result += f"<b>üöÄ –ú–û–¢–ò–í–ê–¶–ò–Ø:</b>\n{checklist.motivation_boost}"
    
    return result

# =============================================================================
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
# =============================================================================

def format_interview_checklist_result(checklist: InterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    result = "üìã <b>–ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ß–ï–ö-–õ–ò–°–¢ –ü–û–î–ì–û–¢–û–í–ö–ò –ö –ò–ù–¢–ï–†–í–¨–Æ</b>\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    result += f"üéØ <b>–ü–æ–∑–∏—Ü–∏—è:</b> {checklist.position_title}\n\n"
    result += f"üìä <b>–û–±–∑–æ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b>\n{checklist.preparation_overview}\n\n"
    result += f"‚è± <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b> {checklist.estimated_preparation_time}\n\n"
    
    return result

def format_technical_skills(checklist: InterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤."""
    if not checklist.technical_skills:
        return ""
    
    result = "üõ† <b>–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ù–ê–í–´–ö–ò –î–õ–Ø –ò–ó–£–ß–ï–ù–ò–Ø</b>\n\n"
    
    for i, skill in enumerate(checklist.technical_skills, 1):
        priority_emoji = {"–í—ã—Å–æ–∫–∏–π": "üî¥", "–°—Ä–µ–¥–Ω–∏–π": "üü°", "–ù–∏–∑–∫–∏–π": "üü¢"}.get(skill.priority, "‚ö™")
        
        result += f"<b>{i}. {skill.skill_name}</b> {priority_emoji}\n"
        result += f"üìà –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {skill.current_level_assessment}\n"
        result += f"üéØ –¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {skill.required_level}\n"
        result += f"üìö –ü–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è: {skill.study_plan}\n"
        
        if skill.resources:
            result += "üîó –†–µ—Å—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n"
            for res in skill.resources[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–µ—Å—É—Ä—Å–∞
                result += f"   ‚Ä¢ {res.title} ({res.estimated_time})\n"
                if res.url:
                    result += f"     {res.url}\n"
        result += "\n"
    
    return result

def format_theory_topics(checklist: InterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º."""
    if not checklist.theory_topics:
        return ""
    
    result = "üìñ <b>–¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–ú–´</b>\n\n"
    
    for i, topic in enumerate(checklist.theory_topics, 1):
        result += f"<b>{i}. {topic.topic_name}</b>\n"
        result += f"‚ùó –í–∞–∂–Ω–æ—Å—Ç—å: {topic.importance}\n"
        result += f"üìä –ì–ª—É–±–∏–Ω–∞ –∏–∑—É—á–µ–Ω–∏—è: {topic.estimated_depth}\n"
        
        if topic.key_concepts:
            result += "üîë –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:\n"
            for concept in topic.key_concepts[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
                result += f"   ‚Ä¢ {concept}\n"
        
        if topic.study_materials:
            result += "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:\n"
            for material in topic.study_materials[:2]:  # –ü–µ—Ä–≤—ã–µ 2 –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                result += f"   ‚Ä¢ {material.title} ({material.estimated_time})\n"
        result += "\n"
    
    return result

def format_practical_tasks(checklist: InterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á."""
    if not checklist.practical_tasks:
        return ""
    
    result = "üíª <b>–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò</b>\n\n"
    
    for i, task in enumerate(checklist.practical_tasks, 1):
        difficulty_emoji = {"–ù–∞—á–∞–ª—å–Ω—ã–π": "üü¢", "–°—Ä–µ–¥–Ω–∏–π": "üü°", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": "üî¥"}.get(task.difficulty_level, "‚ö™")
        
        result += f"<b>{i}. {task.task_title}</b> {difficulty_emoji}\n"
        result += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n"
        
        if task.examples:
            result += "üéØ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:\n"
            for example in task.examples[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞
                result += f"   ‚Ä¢ {example}\n"
        
        if task.practice_resources:
            result += "üéÆ –†–µ—Å—É—Ä—Å—ã –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏:\n"
            for res in task.practice_resources[:2]:  # –ü–µ—Ä–≤—ã–µ 2 —Ä–µ—Å—É—Ä—Å–∞
                result += f"   ‚Ä¢ {res.title}\n"
        result += "\n"
    
    return result

def format_behavioral_questions(checklist: InterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
    if not checklist.behavioral_questions:
        return ""
    
    result = "üó£ <b>–ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´</b>\n\n"
    
    for i, behavior in enumerate(checklist.behavioral_questions, 1):
        result += f"<b>{i}. {behavior.question_category}</b>\n"
        result += f"üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ: {behavior.preparation_tips}\n"
        
        if behavior.example_questions:
            result += "‚ùì –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
            for question in behavior.example_questions[:2]:  # –ü–µ—Ä–≤—ã–µ 2 –≤–æ–ø—Ä–æ—Å–∞
                result += f"   ‚Ä¢ {question}\n"
        result += "\n"
    
    return result

def format_final_recommendations(checklist: InterviewChecklist) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    result = "üè¢ <b>–ò–ó–£–ß–ï–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ò</b>\n"
    result += f"{checklist.company_research_tips}\n\n"
    
    result += "üéØ <b>–§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò</b>\n"
    result += f"{checklist.final_recommendations}\n\n"
    
    result += "üçÄ <b>–£–¥–∞—á–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é!</b>"
    
    return result

# =============================================================================
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
# =============================================================================

async def start_interview_checklist_generation(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é."""
    user_id = message.from_user.id
    logger.info(f"–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    parsed_resume = user_data.get("parsed_resume")
    parsed_vacancy = user_data.get("parsed_vacancy")
    
    if not parsed_resume or not parsed_vacancy:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer(INTERVIEW_CHECKLIST_MESSAGES['generation_error'])
        await state.set_state(UserState.AUTHORIZED)
        return
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    progress_msg = await message.answer(
        "üìã –°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é...\n\n"
        "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ —Ç–∏–ø –≤–∞–∫–∞–Ω—Å–∏–∏\n"
        "üìä –û–ø—Ä–µ–¥–µ–ª—è—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n"
        "üéØ –§–æ—Ä–º–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚è± –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏\n\n"
        "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã...",
        reply_markup=authorized_keyboard
    )
    await state.set_state(UserState.INTERVIEW_CHECKLIST_GENERATION)
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
        try:
            checklist_result = await llm_interview_checklist_generator.generate_professional_interview_checklist(
                parsed_resume, parsed_vacancy
            )
            
            if checklist_result:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await state.update_data(professional_interview_checklist=checklist_result.model_dump())
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —á–∞—Å—Ç—è–º
                await send_professional_checklist_in_parts(message, checklist_result, progress_msg)
                
                await state.set_state(UserState.AUTHORIZED)
                logger.info(f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –∏–Ω—Ç–µ—Ä–≤—å—é —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é: {e}")
        
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
        logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await progress_msg.edit_text("üìã –°–æ–∑–¥–∞—é —á–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é...")
        
        checklist_result = await llm_interview_checklist_generator.generate_interview_checklist(
            parsed_resume, parsed_vacancy
        )
        
        if not checklist_result:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await progress_msg.edit_text(INTERVIEW_CHECKLIST_MESSAGES["generation_error"])
            await state.set_state(UserState.AUTHORIZED)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(interview_checklist=checklist_result.model_dump())
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        try:
            await progress_msg.delete()
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —á–∞—Å—Ç—è–º (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)
        await send_checklist_in_parts(message, checklist_result)
        
        await state.set_state(UserState.AUTHORIZED)
        logger.info(f"–ß–µ–∫-–ª–∏—Å—Ç –∏–Ω—Ç–µ—Ä–≤—å—é (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è) —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
        await progress_msg.edit_text(INTERVIEW_CHECKLIST_MESSAGES["generation_error"])
        await state.set_state(UserState.AUTHORIZED)

async def send_professional_checklist_in_parts(
    message: types.Message, 
    checklist: ProfessionalInterviewChecklist,
    progress_msg: types.Message
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –ø–æ —á–∞—Å—Ç—è–º —Å–æ –≤—Å–µ–º–∏ 7 –±–ª–æ–∫–∞–º–∏."""
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    try:
        await progress_msg.delete()
    except:
        pass
    
    # –ß–∞—Å—Ç—å 1: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    header = format_professional_checklist_header(checklist)
    await message.answer(header, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 2: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    summary = format_executive_summary(checklist)
    await message.answer(summary, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 3: –ë–õ–û–ö 1 - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    technical = format_technical_preparation(checklist)
    if technical:
        await message.answer(technical, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 4: –ë–õ–û–ö 2 - –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    behavioral = format_behavioral_preparation(checklist)
    if behavioral:
        await message.answer(behavioral, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 5: –ë–õ–û–ö 3 - –ò–∑—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
    company = format_company_research(checklist)
    if company:
        await message.answer(company, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 6: –ë–õ–û–ö 4 - –ò–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞ üÜï
    tech_stack = format_technical_stack_study(checklist)
    if tech_stack:
        await message.answer(tech_stack, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 7: –ë–õ–û–ö 5 - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    exercises = format_practical_exercises(checklist)
    if exercises:
        await message.answer(exercises, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 8: –ë–õ–û–ö 6 - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é üÜï
    setup = format_interview_setup(checklist)
    if setup:
        await message.answer(setup, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 9: –ë–õ–û–ö 7 - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è üÜï
    additional = format_additional_actions(checklist)
    if additional:
        await message.answer(additional, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 10: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞ (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π)
    success_factors = format_critical_success_factors(checklist)
    await message.answer(success_factors, reply_markup=authorized_keyboard, parse_mode="HTML")

async def send_checklist_in_parts(message: types.Message, checklist: InterviewChecklist):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ–∫-–ª–∏—Å—Ç –ø–æ —á–∞—Å—Ç—è–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç Telegram (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)."""
    
    # –ß–∞—Å—Ç—å 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    part1 = format_interview_checklist_result(checklist)
    await message.answer(part1, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 2: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏
    part2 = format_technical_skills(checklist)
    if part2:
        await message.answer(part2, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 3: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã
    part3 = format_theory_topics(checklist)
    if part3:
        await message.answer(part3, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 4: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    part4 = format_practical_tasks(checklist)
    if part4:
        await message.answer(part4, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 5: –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    part5 = format_behavioral_questions(checklist)
    if part5:
        await message.answer(part5, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 6: –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    part6 = format_final_recommendations(checklist)
    await message.answer(part6, reply_markup=authorized_keyboard, parse_mode="HTML")