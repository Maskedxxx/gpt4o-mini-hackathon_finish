import logging
from aiogram import types
from aiogram.fsm.context import FSMContext

from src.tg_bot.utils import UserState
from src.tg_bot.utils import COVER_LETTER_MESSAGES
from src.tg_bot.utils import authorized_keyboard
from src.llm_cover_letter.llm_cover_letter_generator import EnhancedLLMCoverLetterGenerator
from src.models.cover_letter_models import EnhancedCoverLetter

from src.utils import get_logger
logger = get_logger()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
enhanced_cover_letter_generator = EnhancedLLMCoverLetterGenerator()

def format_enhanced_cover_letter_preview(cover_letter: EnhancedCoverLetter) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∏—Å—å–º–∞ —Å –æ—Ü–µ–Ω–∫–∞–º–∏."""
    result = "üìß <b>–ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –°–û–ü–†–û–í–û–î–ò–¢–ï–õ–¨–ù–û–ï –ü–ò–°–¨–ú–û</b>\n\n"
    
    # –û—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    result += "üìä <b>–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:</b>\n"
    result += f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: {'‚≠ê' * (cover_letter.personalization_score // 2)}/5\n"
    result += f"‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º: {'‚≠ê' * (cover_letter.professional_tone_score // 2)}/5\n"
    result += f"‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {'‚≠ê' * (cover_letter.relevance_score // 2)}/5\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ä–æ–ª–∏
    result += f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {cover_letter.company_context.company_name}\n"
    result += f"üíº <b>–¢–∏–ø —Ä–æ–ª–∏:</b> {cover_letter.role_type.value}\n"
    result += f"üìè <b>–†–∞–∑–º–µ—Ä –ø–∏—Å—å–º–∞:</b> {cover_letter.estimated_length}\n\n"
    
    return result

def format_skills_match_section(cover_letter: EnhancedCoverLetter) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–≤—ã–∫–æ–≤."""
    result = "üéØ <b>–ê–ù–ê–õ–ò–ó –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø</b>\n\n"
    
    skills_match = cover_letter.skills_match
    
    # –°–æ–≤–ø–∞–¥–∞—é—â–∏–µ –Ω–∞–≤—ã–∫–∏
    if skills_match.matched_skills:
        result += "‚úÖ <b>–°–æ–≤–ø–∞–¥–∞—é—â–∏–µ –Ω–∞–≤—ã–∫–∏:</b>\n"
        for skill in skills_match.matched_skills[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            result += f"‚Ä¢ {skill}\n"
        if len(skills_match.matched_skills) > 5:
            result += f"‚Ä¢ –∏ –µ—â–µ {len(skills_match.matched_skills) - 5} –Ω–∞–≤—ã–∫–æ–≤...\n"
        result += "\n"
    
    # –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç
    result += f"üíº <b>–ö–ª—é—á–µ–≤–æ–π –æ–ø—ã—Ç:</b>\n{skills_match.relevant_experience}\n\n"
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å —Ü–∏—Ñ—Ä–∞–º–∏
    if skills_match.quantified_achievement:
        result += f"üìà <b>–ì–ª–∞–≤–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:</b>\n{skills_match.quantified_achievement}\n\n"
    
    # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–∑–≤–∏—Ç–∏—é
    if skills_match.growth_potential:
        result += f"üå± <b>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–∑–≤–∏—Ç–∏—é:</b>\n{skills_match.growth_potential}\n\n"
    
    return result

def format_cover_letter_text(cover_letter: EnhancedCoverLetter) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞."""
    result = "üìù <b>–¢–ï–ö–°–¢ –ü–ò–°–¨–ú–ê</b>\n\n"
    
    result += f"<b>üìå –¢–µ–º–∞:</b> {cover_letter.subject_line}\n\n"
    result += f"{cover_letter.personalized_greeting}\n\n"
    result += f"{cover_letter.opening_hook}\n\n"
    result += f"{cover_letter.company_interest}\n\n"
    result += f"{cover_letter.relevant_experience}\n\n"
    result += f"{cover_letter.value_demonstration}\n\n"
    
    if cover_letter.growth_mindset:
        result += f"{cover_letter.growth_mindset}\n\n"
    
    result += f"{cover_letter.professional_closing}\n\n"
    result += f"{cover_letter.signature}\n\n"
    
    return result

def format_improvement_tips(cover_letter: EnhancedCoverLetter) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é."""
    if not cover_letter.improvement_suggestions:
        return ""
    
    result = "üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ</b>\n\n"
    
    for i, suggestion in enumerate(cover_letter.improvement_suggestions, 1):
        result += f"{i}. {suggestion}\n"
    
    return result

async def start_cover_letter_generation(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞."""
    user_id = message.from_user.id
    logger.info(f"–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ cover letter –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    parsed_resume = user_data.get("parsed_resume")
    parsed_vacancy = user_data.get("parsed_vacancy")
    
    if not parsed_resume or not parsed_vacancy:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer(COVER_LETTER_MESSAGES['generation_error'])
        await state.set_state(UserState.AUTHORIZED)
        return
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    progress_msg = await message.answer(
        "üìß –°–æ–∑–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ...\n\n"
        "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞–∫–∞–Ω—Å–∏—é –∏ –∫–æ–º–ø–∞–Ω–∏—é\n"
        "üéØ –ü–æ–¥–±–∏—Ä–∞—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏\n"
        "‚úçÔ∏è –§–æ—Ä–º–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç\n"
        "üìä –û—Ü–µ–Ω–∏–≤–∞—é –∫–∞—á–µ—Å—Ç–≤–æ\n\n"
        "‚è± –≠—Ç–æ –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã...",
        reply_markup=authorized_keyboard
    )
    await state.set_state(UserState.COVER_LETTER_GENERATION)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ cover letter
        cover_letter_result = await enhanced_cover_letter_generator.generate_enhanced_cover_letter(
            parsed_resume, parsed_vacancy
        )
        
        if not cover_letter_result:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å enhanced cover letter –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await progress_msg.edit_text(COVER_LETTER_MESSAGES["generation_error"])
            await state.set_state(UserState.AUTHORIZED)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(enhanced_cover_letter=cover_letter_result.model_dump())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —á–∞—Å—Ç—è–º
        await send_enhanced_cover_letter_in_parts(message, cover_letter_result, progress_msg)
        
        await state.set_state(UserState.AUTHORIZED)
        logger.info(f"Enhanced cover letter —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ enhanced cover letter: {e}")
        await progress_msg.edit_text(COVER_LETTER_MESSAGES["generation_error"])
        await state.set_state(UserState.AUTHORIZED)

async def send_enhanced_cover_letter_in_parts(
    message: types.Message, 
    cover_letter: EnhancedCoverLetter,
    progress_msg: types.Message
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –ø–æ —á–∞—Å—Ç—è–º."""
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    try:
        await progress_msg.delete()
    except:
        pass
    
    # –ß–∞—Å—Ç—å 1: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    preview = format_enhanced_cover_letter_preview(cover_letter)
    await message.answer(preview, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 2: –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    skills_match = format_skills_match_section(cover_letter)
    await message.answer(skills_match, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 3: –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
    letter_text = format_cover_letter_text(cover_letter)
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    if len(letter_text) > 4000:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
        parts = []
        current_part = ""
        
        for paragraph in letter_text.split('\n\n'):
            if len(current_part + paragraph) < 3500:
                current_part += paragraph + '\n\n'
            else:
                parts.append(current_part.strip())
                current_part = paragraph + '\n\n'
        
        if current_part:
            parts.append(current_part.strip())
        
        for part in parts:
            await message.answer(part, parse_mode="HTML")
    else:
        await message.answer(letter_text, parse_mode="HTML")
    
    # –ß–∞—Å—Ç—å 4: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
    improvements = format_improvement_tips(cover_letter)
    if improvements:
        await message.answer(improvements, reply_markup=authorized_keyboard, parse_mode="HTML")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            "‚úÖ <b>–ü–∏—Å—å–º–æ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!</b>\n\n"
            "üí° –°–æ–≤–µ—Ç: –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –µ—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è HR-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.",
            reply_markup=authorized_keyboard,
            parse_mode="HTML"
        )