# src/tg_bot/handlers/spec_handlers/cover_letter_handler.py
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext

from src.tg_bot.utils import UserState
from src.tg_bot.utils import COVER_LETTER_MESSAGES
from src.tg_bot.utils import authorized_keyboard
from src.llm_cover_letter import LLMCoverLetterGenerator
from src.models.cover_letter_models import CoverLetter

from src.utils import get_logger
logger = get_logger()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
llm_cover_letter_generator = LLMCoverLetterGenerator()

def format_cover_letter_result(cover_letter: CoverLetter) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    result = "üìß <b>–í–ê–®–ï –†–ï–ö–û–ú–ï–ù–î–ê–¢–ï–õ–¨–ù–û–ï –ü–ò–°–¨–ú–û</b>\n\n"
    
    result += f"<b>üìå –¢–µ–º–∞ –ø–∏—Å—å–º–∞:</b>\n{cover_letter.subject_line}\n\n"
    result += f"<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</b>\n{cover_letter.greeting}\n\n"
    result += f"<b>üìù –í–≤–æ–¥–Ω–∞—è —á–∞—Å—Ç—å:</b>\n{cover_letter.opening_paragraph}\n\n"
    result += f"<b>üíº –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å:</b>\n{cover_letter.body_paragraphs}\n\n"
    result += f"<b>üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:</b>\n{cover_letter.closing_paragraph}\n\n"
    result += f"<b>‚úçÔ∏è –ü–æ–¥–ø–∏—Å—å:</b>\n{cover_letter.signature}\n\n"
    result += "üí° <b>–≠—Ç–æ –ø–∏—Å—å–º–æ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é!</b>"
    
    return result

async def start_cover_letter_generation(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞."""
    user_id = message.from_user.id
    logger.info(f"–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ cover letter –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    parsed_resume = user_data.get("parsed_resume")
    parsed_vacancy = user_data.get("parsed_vacancy")
    
    if not parsed_resume or not parsed_vacancy:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer(COVER_LETTER_MESSAGES['generation_error'])
        await state.set_state(UserState.AUTHORIZED)
        return
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await message.answer(COVER_LETTER_MESSAGES["generation_started"], reply_markup=authorized_keyboard)
    await state.set_state(UserState.COVER_LETTER_GENERATION)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é cover letter
        cover_letter_result = await llm_cover_letter_generator.generate_cover_letter(parsed_resume, parsed_vacancy)
        
        if not cover_letter_result:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å cover letter –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer(COVER_LETTER_MESSAGES["generation_error"])
            await state.set_state(UserState.AUTHORIZED)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(cover_letter=cover_letter_result.model_dump())
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        formatted_result = format_cover_letter_result(cover_letter_result)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ)
        max_length = 4000  # Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤
        if len(formatted_result) <= max_length:
            await message.answer(formatted_result, reply_markup=authorized_keyboard, parse_mode="HTML")
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            lines = formatted_result.split('\n')
            
            for line in lines:
                if len(current_part + line + '\n') <= max_length:
                    current_part += line + '\n'
                else:
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = line + '\n'
            
            if current_part:
                parts.append(current_part.strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
            for i, part in enumerate(parts):
                if i == len(parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    await message.answer(part, reply_markup=authorized_keyboard, parse_mode="HTML")
                else:
                    await message.answer(part, parse_mode="HTML")
        
        await state.set_state(UserState.AUTHORIZED)
        logger.info(f"Cover letter —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ cover letter: {e}")
        await message.answer(COVER_LETTER_MESSAGES["generation_error"])
        await state.set_state(UserState.AUTHORIZED)