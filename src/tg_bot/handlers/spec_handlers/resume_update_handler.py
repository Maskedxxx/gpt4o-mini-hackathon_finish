# src/tg_bot/handlers/spec_handlers/resume_update_handler.py
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext

from src.tg_bot.utils import UserState
from src.tg_bot.utils import RESUME_UPDATE_MESSAGES
from src.tg_bot.utils import resume_rewrite_keyboard
from src.llm_update_resume import LLMResumeUpdater
from src.models.resume_update_models import ResumeUpdate
from src.models.gap_analysis_models import ResumeGapAnalysis

logger = logging.getLogger("resume_update_handler")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ
llm_resume_updater = LLMResumeUpdater()

async def start_resume_update(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ GAP-–∞–Ω–∞–ª–∏–∑–∞.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è FSM
    """
    user_id = message.from_user.id
    logger.info(f"–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    parsed_resume = user_data.get("parsed_resume")
    gap_analysis = user_data.get("gap_analysis")
    
    if not parsed_resume or not gap_analysis:
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer(RESUME_UPDATE_MESSAGES["update_error"])
        await state.set_state(UserState.AUTHORIZED)
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å gap_analysis –≤ –æ–±—ä–µ–∫—Ç ResumeGapAnalysis
    try:
        gap_result = ResumeGapAnalysis.model_validate(gap_analysis)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ gap-–∞–Ω–∞–ª–∏–∑–∞: {e}")
        await message.answer(RESUME_UPDATE_MESSAGES["update_error"])
        await state.set_state(UserState.AUTHORIZED)
        return
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ
    await message.answer(RESUME_UPDATE_MESSAGES["update_started"])
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ
        resume_update_result = await llm_resume_updater.update_resume(parsed_resume, gap_result)
        
        if not resume_update_result:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer(RESUME_UPDATE_MESSAGES["update_error"])
            await state.set_state(UserState.AUTHORIZED)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(updated_resume=resume_update_result.model_dump())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_message = format_resume_update_result(resume_update_result)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"{RESUME_UPDATE_MESSAGES['update_completed']}\n\n{result_message}", reply_markup=resume_rewrite_keyboard)
        await state.set_state(UserState.AUTHORIZED)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {e}")
        await message.answer(RESUME_UPDATE_MESSAGES["update_error"])
        await state.set_state(UserState.AUTHORIZED)


# –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è?
def format_resume_update_result(resume_update: ResumeUpdate) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        resume_update: –û–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–µ–∑—é–º–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    result = "üìù –í–∞—à–µ —Ä–µ–∑—é–º–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –∂–µ–ª–∞–µ–º–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    result += f"üë®‚Äçüíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {resume_update.title}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤—ã–∫–∞—Ö
    result += f"üîß –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤:\n{resume_update.skills}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
    result += "üõ† –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:\n"
    for skill in resume_update.skill_set:
        result += f"‚Ä¢ {skill}\n"
    result += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏
    if resume_update.professional_roles:
        result += "üëî –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏:\n"
        for role in resume_update.professional_roles:
            result += f"‚Ä¢ {role.name}\n"
        result += "\n"
    
    result += "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç hh.ru –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è."
    
    return result