# src/tg_bot/handlers/gap_analyzer_handler.py
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext

from src.tg_bot.utils import UserState
from src.tg_bot.utils import GAP_ANALYZE_MESSAGES
from src.tg_bot.utils import authorized_keyboard
from src.llm_gap_analyzer import LLMGapAnalyzer
from src.models.gap_analysis_models import ResumeTailoringAnalysis

from src.utils import get_logger
logger = get_logger()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
llm_analyzer = LLMGapAnalyzer()

def format_gap_analysis_result(gap_analysis: ResumeTailoringAnalysis) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç gap-–∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    result = "üìä <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –†–ï–ó–Æ–ú–ï</b>\n\n"
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    result += f"üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b>\n{gap_analysis.suggested_resume_title}\n\n"
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
    result += f"üìù <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤:</b>\n{gap_analysis.suggested_skills_description_for_rewriter}\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
    result += "üõ† <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:</b>\n"
    for skill in gap_analysis.suggested_skill_set_for_rewriter:
        result += f"‚Ä¢ {skill}\n"
    result += "\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã
    result += "üíº <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–´–¢–£ –†–ê–ë–û–¢–´:</b>\n\n"
    
    for i, exp_report in enumerate(gap_analysis.experience_reports, 1):
        result += f"<b>{i}. {exp_report.experience_identifier}</b>\n"
        result += f"üìã –û—Ü–µ–Ω–∫–∞: {exp_report.overall_assessment}\n\n"
        
        if exp_report.modification_instructions:
            result += "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:\n"
            for j, instruction in enumerate(exp_report.modification_instructions, 1):
                action_emoji = {
                    "ADD": "‚ûï",
                    "UPDATE": "‚úèÔ∏è", 
                    "DELETE": "‚ùå",
                    "HIGHLIGHT": "‚≠ê"
                }.get(instruction.action, "üìå")
                
                result += f"{action_emoji} {instruction.action}: {instruction.instruction_details}\n"
                result += f"   üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {instruction.vacancy_relevance_reason}\n"
            result += "\n"
    
    result += "üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ!</b>"
    return result

async def start_gap_analysis(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å gap-–∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ."""
    user_id = message.from_user.id
    logger.info(f"–ó–∞–ø—É—Å–∫ gap-–∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    parsed_resume = user_data.get("parsed_resume")
    parsed_vacancy = user_data.get("parsed_vacancy")
    
    if not parsed_resume or not parsed_vacancy:
        logger.error(f"parser_error –¥–ª—è {user_id}")
        await message.answer(GAP_ANALYZE_MESSAGES['analysis_error'])
        await state.set_state(UserState.AUTHORIZED)
        return
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    await message.answer(GAP_ANALYZE_MESSAGES["analysis_started"], reply_markup=authorized_keyboard)
    await state.set_state(UserState.RESUME_GAP_ANALYZE)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º gap-–∞–Ω–∞–ª–∏–∑
        gap_analysis_result = await llm_analyzer.gap_analysis(parsed_resume, parsed_vacancy)
        
        if not gap_analysis_result:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å gap-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer(GAP_ANALYZE_MESSAGES["analysis_error"])
            await state.set_state(UserState.AUTHORIZED)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(gap_analysis=gap_analysis_result.model_dump())
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        formatted_result = format_gap_analysis_result(gap_analysis_result)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ)
        max_length = 4000  # Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤
        if len(formatted_result) <= max_length:
            await message.answer(formatted_result, reply_markup=authorized_keyboard, parse_mode="Markdown")
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            lines = formatted_result.split('\n')
            
            for line in lines:
                if len(current_part + line + '\n') <= max_length:
                    current_part += line + '\n'
                else:
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = line + '\n'
            
            if current_part:
                parts.append(current_part.strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
            for i, part in enumerate(parts):
                if i == len(parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    await message.answer(part, reply_markup=authorized_keyboard, parse_mode="Markdown")
                else:
                    await message.answer(part, parse_mode="Markdown")
        
        await state.set_state(UserState.AUTHORIZED)
        logger.info(f"Gap-–∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ gap-–∞–Ω–∞–ª–∏–∑–∞: {e}")
        await message.answer(GAP_ANALYZE_MESSAGES["analysis_error"])
        await state.set_state(UserState.AUTHORIZED)