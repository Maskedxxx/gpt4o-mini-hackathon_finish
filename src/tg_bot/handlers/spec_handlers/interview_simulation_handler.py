# src/tg_bot/handlers/spec_handlers/interview_simulation_handler.py
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext

from src.tg_bot.utils import UserState
from src.tg_bot.utils import INTERVIEW_SIMULATION_MESSAGES
from src.tg_bot.utils import authorized_keyboard

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from src.llm_interview_simulation.llm_interview_simulator import ProfessionalInterviewSimulator
from src.llm_interview_simulation.pdf_generator import ProfessionalInterviewPDFGenerator
from src.models.interview_simulation_models import InterviewSimulation

from src.utils import get_logger
logger = get_logger()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
llm_interview_simulator = ProfessionalInterviewSimulator()
pdf_generator = ProfessionalInterviewPDFGenerator()

def format_simulation_preview(simulation: InterviewSimulation) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∏–º—É–ª—è—Ü–∏–∏."""
    result = "üé≠ <b>–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø –ò–ù–¢–ï–†–í–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n"
    
    result += f"üéØ <b>–ü–æ–∑–∏—Ü–∏—è:</b> {simulation.position_title}\n"
    result += f"üë§ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> {simulation.candidate_name}\n"
    result += f"üìä <b>–£—Ä–æ–≤–µ–Ω—å:</b> {simulation.candidate_profile.detected_level.value.title()}\n"
    result += f"üíº <b>–†–æ–ª—å:</b> {simulation.candidate_profile.detected_role.value.replace('_', ' ').title()}\n"
    result += f"üîÑ <b>–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ä–∞—É–Ω–¥–æ–≤:</b> {simulation.total_rounds_completed} –∏–∑ {simulation.interview_config.target_rounds}\n\n"
    
    # –û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å —ç–º–æ–¥–∑–∏
    recommendation_emoji = {
        "hire": "‚úÖ",
        "conditional_hire": "‚ö°", 
        "reject": "‚ùå"
    }
    emoji = recommendation_emoji.get(simulation.assessment.overall_recommendation, "‚ùì")
    recommendation_text = {
        "hire": "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫ –Ω–∞–π–º—É",
        "conditional_hire": "–£—Å–ª–æ–≤–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å", 
        "reject": "–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å"
    }
    rec_text = recommendation_text.get(simulation.assessment.overall_recommendation, "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
    
    result += f"üéØ <b>–û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> {emoji} {rec_text}\n"
    result += f"‚≠ê <b>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤:</b> {simulation.average_response_quality:.1f}/5.0\n\n"
    
    # –¢–æ–ø –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
    if simulation.assessment.competency_scores:
        top_competencies = sorted(simulation.assessment.competency_scores, key=lambda x: x.score, reverse=True)[:3]
        result += "<b>üèÜ –õ—É—á—à–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:</b>\n"
        for comp in top_competencies:
            comp_name = _translate_competency_name(comp.area)
            result += f"‚Ä¢ {comp_name}: {comp.score}/5\n"
        result += "\n"
    
    # –ö—Ä–∞—Ç–∫–∏–π –ø—Ä–∏–º–µ—Ä –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    if simulation.dialog_messages:
        result += "<b>üìù –ü—Ä–∏–º–µ—Ä –∏–∑ –¥–∏–∞–ª–æ–≥–∞:</b>\n"
        first_hr_msg = next((msg for msg in simulation.dialog_messages if msg.speaker == "HR"), None)
        if first_hr_msg:
            preview_text = first_hr_msg.message[:100] + "..." if len(first_hr_msg.message) > 100 else first_hr_msg.message
            result += f"<i>HR: {preview_text}</i>\n\n"
    
    result += "üìÑ <b>–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ</b>"
    
    return result

def _translate_competency_name(competency) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π."""
    from src.models.interview_simulation_models import CompetencyArea
    
    translations = {
        CompetencyArea.TECHNICAL_EXPERTISE: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞",
        CompetencyArea.COMMUNICATION: "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
        CompetencyArea.PROBLEM_SOLVING: "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º",
        CompetencyArea.TEAMWORK: "–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
        CompetencyArea.LEADERSHIP: "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ",
        CompetencyArea.ADAPTABILITY: "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å",
        CompetencyArea.LEARNING_ABILITY: "–û–±—É—á–∞–µ–º–æ—Å—Ç—å",
        CompetencyArea.MOTIVATION: "–ú–æ—Ç–∏–≤–∞—Ü–∏—è",
        CompetencyArea.CULTURAL_FIT: "–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"
    }
    return translations.get(competency, competency.value)

async def start_interview_simulation(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é."""
    user_id = message.from_user.id
    logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    parsed_resume = user_data.get("parsed_resume")
    parsed_vacancy = user_data.get("parsed_vacancy")
    
    if not parsed_resume or not parsed_vacancy:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer(INTERVIEW_SIMULATION_MESSAGES['generation_error'])
        await state.set_state(UserState.AUTHORIZED)
        return
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ —Å–∏–º—É–ª—è—Ü–∏–∏
    await message.answer(INTERVIEW_SIMULATION_MESSAGES["generation_started"], reply_markup=authorized_keyboard)
    await state.set_state(UserState.INTERVIEW_SIMULATION_GENERATION)
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress_msg = await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        async def progress_callback(current_round: int, total_rounds: int):
            await send_simulation_progress_update(progress_msg, current_round, total_rounds)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∫–æ–ª–±–µ–∫–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        simulation_result = await llm_interview_simulator.simulate_interview(
            parsed_resume, 
            parsed_vacancy,
            progress_callback=progress_callback
        )
        
        if not simulation_result:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer(INTERVIEW_SIMULATION_MESSAGES["generation_error"])
            await state.set_state(UserState.AUTHORIZED)
            return
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã
        await progress_msg.edit_text("üìä –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π...")
        await progress_msg.edit_text("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ PDF –æ—Ç—á–µ—Ç–∞...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —Å –Ω–æ–≤—ã–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º
        pdf_buffer = pdf_generator.generate_pdf(simulation_result)
        if not pdf_buffer:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF –æ—Ç—á–µ—Ç–∞")
            await state.set_state(UserState.AUTHORIZED)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(interview_simulation=simulation_result.model_dump())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        preview_text = format_simulation_preview(simulation_result)
        await progress_msg.edit_text(preview_text, parse_mode="HTML")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
        filename = pdf_generator.generate_filename(simulation_result)
        
        # –°–æ–∑–¥–∞–µ–º InputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        pdf_file = types.BufferedInputFile(
            file=pdf_buffer.getvalue(),
            filename=filename
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        caption_text = f"üìÑ <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é</b>\n\n"
        caption_text += f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏:</b>\n"
        caption_text += f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {simulation_result.candidate_profile.detected_level.value.title()}\n"
        caption_text += f"‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ä–∞—É–Ω–¥–æ–≤: {simulation_result.total_rounds_completed}\n"
        caption_text += f"‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: {len(simulation_result.assessment.competency_scores)} –æ–±–ª–∞—Å—Ç–µ–π\n"
        caption_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {simulation_result.average_response_quality:.1f}/5.0\n\n"
        
        caption_text += f"üìã <b>–í –æ—Ç—á–µ—Ç–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è:</b>\n"
        caption_text += f"‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏–Ω—Ç–µ—Ä–≤—å—é —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        caption_text += f"‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ {len(simulation_result.assessment.competency_scores)} –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º\n"
        caption_text += f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω\n"
        caption_text += f"‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ HR\n"
        caption_text += f"‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ü–µ–Ω–∫–∏\n\n"
        caption_text += f"üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é!</b>"
        
        await message.answer_document(
            document=pdf_file,
            caption=caption_text,
            parse_mode="HTML",
            reply_markup=authorized_keyboard
        )
        
        await state.set_state(UserState.AUTHORIZED)
        logger.info(f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
        await message.answer(INTERVIEW_SIMULATION_MESSAGES["generation_error"])
        await state.set_state(UserState.AUTHORIZED)

async def send_simulation_progress_update(message: types.Message, round_number: int, total_rounds: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏."""
    progress_text = "üé≠ –ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é...\n\n"
    progress_text += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {round_number}/{total_rounds} —Ä–∞—É–Ω–¥–æ–≤\n"
    progress_text += f"{'‚ñì' * round_number}{'‚ñë' * (total_rounds - round_number)}\n\n"
    
    # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Ä–∞—É–Ω–¥–æ–≤
    if round_number == 1:
        progress_text += "üëã –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ –æ—Ü–µ–Ω–∫–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏..."
    elif round_number == 2:
        progress_text += "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∏ –Ω–∞–≤—ã–∫–∏..."
    elif round_number == 3:
        progress_text += "üíº –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã (STAR-–º–µ—Ç–æ–¥–∏–∫–∞)..."
    elif round_number == 4:
        progress_text += "üß© –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è..."
    elif round_number == 5:
        progress_text += "üéØ –ö—É–ª—å—Ç—É—Ä–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ..."
    elif round_number >= 6:
        progress_text += "üëë –õ–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã..."
    
    try:
        await message.edit_text(progress_text)
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(progress_text)