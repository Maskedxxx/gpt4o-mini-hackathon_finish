# src/tg_bot/handlers/spec_handlers/interview_simulation_handler.py
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext

from src.tg_bot.utils import UserState
from src.tg_bot.utils import INTERVIEW_SIMULATION_MESSAGES
from src.tg_bot.utils import authorized_keyboard
from src.llm_interview_simulation import LLMInterviewSimulator
from src.llm_interview_simulation.pdf_generator import InterviewSimulationPDFGenerator
from src.models.interview_simulation_models import InterviewSimulation

logger = logging.getLogger("interview_simulation_handler")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
llm_interview_simulator = LLMInterviewSimulator()
pdf_generator = InterviewSimulationPDFGenerator()

def format_simulation_preview(simulation: InterviewSimulation) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∏–º—É–ª—è—Ü–∏–∏."""
    result = "üé≠ <b>–°–ò–ú–£–õ–Ø–¶–ò–Ø –ò–ù–¢–ï–†–í–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n"
    
    result += f"üéØ <b>–ü–æ–∑–∏—Ü–∏—è:</b> {simulation.position_title}\n"
    result += f"üë§ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> {simulation.candidate_name}\n"
    result += f"üîÑ <b>–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ä–∞—É–Ω–¥–æ–≤:</b> {simulation.simulation_metadata.get('rounds_completed', 'N/A')}\n\n"
    
    # –ö—Ä–∞—Ç–∫–∏–π –ø—Ä–∏–º–µ—Ä –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    if simulation.dialog_messages:
        result += "<b>üìù –ü—Ä–∏–º–µ—Ä –∏–∑ –¥–∏–∞–ª–æ–≥–∞:</b>\n"
        first_hr_msg = next((msg for msg in simulation.dialog_messages if msg.speaker == "HR"), None)
        if first_hr_msg:
            preview_text = first_hr_msg.message[:100] + "..." if len(first_hr_msg.message) > 100 else first_hr_msg.message
            result += f"<i>HR: {preview_text}</i>\n\n"
    
    # –ö—Ä–∞—Ç–∫–∞—è –æ—Ü–µ–Ω–∫–∞
    result += "<b>üìã –ö—Ä–∞—Ç–∫–∞—è –æ—Ü–µ–Ω–∫–∞ HR:</b>\n"
    assessment_preview = simulation.hr_assessment[:150] + "..." if len(simulation.hr_assessment) > 150 else simulation.hr_assessment
    result += f"<i>{assessment_preview}</i>\n\n"
    
    result += "üìÑ <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ</b>"
    
    return result

async def start_interview_simulation(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é."""
    user_id = message.from_user.id
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    parsed_resume = user_data.get("parsed_resume")
    parsed_vacancy = user_data.get("parsed_vacancy")
    
    if not parsed_resume or not parsed_vacancy:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer(INTERVIEW_SIMULATION_MESSAGES['generation_error'])
        await state.set_state(UserState.AUTHORIZED)
        return
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ —Å–∏–º—É–ª—è—Ü–∏–∏
    await message.answer(INTERVIEW_SIMULATION_MESSAGES["generation_started"], reply_markup=authorized_keyboard)
    await state.set_state(UserState.INTERVIEW_SIMULATION_GENERATION)
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress_msg = await message.answer("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∏–Ω—Ç–µ—Ä–≤—å—é
        simulation_result = await llm_interview_simulator.simulate_interview(parsed_resume, parsed_vacancy)
        
        if not simulation_result:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer(INTERVIEW_SIMULATION_MESSAGES["generation_error"])
            await state.set_state(UserState.AUTHORIZED)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await progress_msg.edit_text("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ PDF –æ—Ç—á–µ—Ç–∞...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        pdf_buffer = pdf_generator.generate_pdf(simulation_result)
        if not pdf_buffer:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF –æ—Ç—á–µ—Ç–∞")
            await state.set_state(UserState.AUTHORIZED)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(interview_simulation=simulation_result.model_dump())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        preview_text = format_simulation_preview(simulation_result)
        await progress_msg.edit_text(preview_text, parse_mode="HTML")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
        filename = pdf_generator.generate_filename(simulation_result)
        
        # –°–æ–∑–¥–∞–µ–º InputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        pdf_file = types.BufferedInputFile(
            file=pdf_buffer.getvalue(),
            filename=filename
        )
        
        await message.answer_document(
            document=pdf_file,
            caption=f"üìÑ <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é</b>\n\n"
                   f"–í –¥–æ–∫—É–º–µ–Ω—Ç–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è:\n"
                   f"‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏–Ω—Ç–µ—Ä–≤—å—é ({simulation_result.simulation_metadata.get('rounds_completed', 0)} —Ä–∞—É–Ω–¥–æ–≤)\n"
                   f"‚Ä¢ –û—Ü–µ–Ω–∫–∞ HR-–º–µ–Ω–µ–¥–∂–µ—Ä–∞\n"
                   f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞\n"
                   f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n\n"
                   f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä–µ–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤—å—é!",
            parse_mode="HTML",
            reply_markup=authorized_keyboard
        )
        
        await state.set_state(UserState.AUTHORIZED)
        logger.info(f"–°–∏–º—É–ª—è—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
        await message.answer(INTERVIEW_SIMULATION_MESSAGES["generation_error"])
        await state.set_state(UserState.AUTHORIZED)

async def send_simulation_progress_update(message: types.Message, round_number: int, total_rounds: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∏–º—É–ª—è—Ü–∏–∏."""
    progress_text = "üé≠ –ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é...\n\n"
    progress_text += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {round_number}/{total_rounds} —Ä–∞—É–Ω–¥–æ–≤\n"
    progress_text += f"{'‚ñì' * round_number}{'‚ñë' * (total_rounds - round_number)}\n\n"
    
    if round_number == 1:
        progress_text += "üéØ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ –ø–µ—Ä–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã..."
    elif round_number == 2:
        progress_text += "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã..."
    elif round_number == 3:
        progress_text += "üíº –û–±—Å—É–∂–¥–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã..."
    elif round_number == 4:
        progress_text += "üß© –°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏..."
    elif round_number == 5:
        progress_text += "üéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã..."
    
    try:
        await message.edit_text(progress_text)
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(progress_text)