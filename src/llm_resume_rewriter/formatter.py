# src/llm_resume_rewriter/formatter.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ –∏ GAP-–∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ LLM –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞.
"""

def format_resume_data(resume_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –≤ —á–∏—Ç–∞–µ–º—ã–π markdown —Ñ–æ—Ä–º–∞—Ç.
    
    Args:
        resume_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–∑—é–º–µ
        
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π markdown —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ
    """
    formatted_text = "# –¢–ï–ö–£–©–ï–ï –†–ï–ó–Æ–ú–ï –ö–ê–ù–î–ò–î–ê–¢–ê\n\n"
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    formatted_text += "## –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
    first_name = resume_data.get('first_name', '')
    last_name = resume_data.get('last_name', '')
    middle_name = resume_data.get('middle_name', '')
    
    if first_name or last_name or middle_name:
        full_name = f"{last_name} {first_name} {middle_name}".strip()
        formatted_text += f"–§–ò–û: {full_name}\n"
    else:
        formatted_text += "–§–ò–û: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"
    
    # –û–±—â–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
    total_experience = resume_data.get('total_experience')
    if total_experience:
        years = total_experience // 12
        months = total_experience % 12
        exp_text = f"{years} –ª–µ—Ç {months} –º–µ—Å." if years > 0 else f"{months} –º–µ—Å."
        formatted_text += f"**–û–±—â–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:** {exp_text}\n"
    else:
        formatted_text += "**–û–±—â–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:** –ù–µ —É–∫–∞–∑–∞–Ω\n"
    
    formatted_text += "\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    formatted_text += "## –ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å\n"
    formatted_text += f"{resume_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
    
    # –ù–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
    formatted_text += "## –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤\n"
    skills = resume_data.get('skills', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')
    if isinstance(skills, list):
        skills = ', '.join(skills)
    formatted_text += f"{skills}\n\n"
    
    # –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
    formatted_text += "## –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏\n"
    skill_set = resume_data.get('skill_set', [])
    if skill_set:
        for skill in skill_set:
            formatted_text += f"- {skill}\n"
    else:
        formatted_text += "–ù–µ —É–∫–∞–∑–∞–Ω—ã\n"
    formatted_text += "\n"
    
    # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
    formatted_text += "## –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã\n"
    experience_list = resume_data.get('experience', [])
    if experience_list:
        for i, exp in enumerate(experience_list, 1):
            position = exp.get('position', '–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            company = exp.get('company', '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            start = exp.get('start', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            end = exp.get('end', '–ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è')
            description = exp.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            
            formatted_text += f"### –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã #{i}: {position}\n"
            formatted_text += f"**–ö–æ–º–ø–∞–Ω–∏—è:** {company}\n"
            formatted_text += f"**–ü–µ—Ä–∏–æ–¥:** {start} - {end}\n"
            formatted_text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:**\n {description}\n\n"
    else:
        formatted_text += "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω\n\n"
    
    # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    education = resume_data.get('education')
    if education:
        formatted_text += "## –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n"
        
        # –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        level = education.get('level')
        if level and level.get('name'):
            formatted_text += f"**–£—Ä–æ–≤–µ–Ω—å:** {level.get('name')}\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        primary = education.get('primary', [])
        if primary:
            formatted_text += "### –û—Å–Ω–æ–≤–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n"
            for edu in primary:
                name = edu.get('name', '–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                organization = edu.get('organization', '')
                result = edu.get('result', '')
                year = edu.get('year', '')
                
                formatted_text += f"**{name}**"
                if year:
                    formatted_text += f" ({year})"
                formatted_text += "\n"
                
                if organization:
                    formatted_text += f"- –§–∞–∫—É–ª—å—Ç–µ—Ç/–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {organization}\n"
                if result:
                    formatted_text += f"- –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {result}\n"
                formatted_text += "\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        additional = education.get('additional', [])
        if additional:
            formatted_text += "### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n"
            for edu in additional:
                name = edu.get('name', '–ö—É—Ä—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
                organization = edu.get('organization', '')
                result = edu.get('result', '')
                year = edu.get('year', '')
                
                formatted_text += f"**{name}**"
                if year:
                    formatted_text += f" ({year})"
                formatted_text += "\n"
                
                if organization:
                    formatted_text += f"- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {organization}\n"
                if result:
                    formatted_text += f"- –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n"
                formatted_text += "\n"
    
    # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    certificates = resume_data.get('certificate', [])
    if certificates:
        formatted_text += "## –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n"
        for cert in certificates:
            title = cert.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            url = cert.get('url')
            
            if url:
                formatted_text += f"- **{title}** ([—Å—Å—ã–ª–∫–∞]({url}))\n"
            else:
                formatted_text += f"- **{title}**\n"
        formatted_text += "\n"
    
    # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏
    formatted_text += "## –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏\n"
    roles = resume_data.get('professional_roles', [])
    if roles:
        for role in roles:
            formatted_text += f"- {role.get('name', '')}\n"
    else:
        formatted_text += "–ù–µ —É–∫–∞–∑–∞–Ω—ã\n"
    formatted_text += "\n"
    
    return formatted_text


def format_gap_analysis_data(gap_analysis_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ GAP-–∞–Ω–∞–ª–∏–∑–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π markdown —Ñ–æ—Ä–º–∞—Ç.
    
    Args:
        gap_analysis_data: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ GAP-–∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π markdown —Ç–µ–∫—Å—Ç GAP-–∞–Ω–∞–ª–∏–∑–∞
    """
    formatted_text = "# –†–ï–ó–£–õ–¨–¢–ê–¢–´ GAP-–ê–ù–ê–õ–ò–ó–ê\n\n"
    
    # –û–±—â–∏–π –≤–µ—Ä–¥–∏–∫—Ç
    overall_verdict = gap_analysis_data.get('overall_verdict', {})
    if overall_verdict:
        formatted_text += "## –û–±—â–∏–π –≤–µ—Ä–¥–∏–∫—Ç\n"
        formatted_text += f"**–°—Ç–∞—Ç—É—Å:** {overall_verdict.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        formatted_text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {overall_verdict.get('explanation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
    competency_analysis = gap_analysis_data.get('competency_analysis', [])
    if competency_analysis:
        formatted_text += "## –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π\n"
        for comp in competency_analysis:
            area = comp.get('area', {}).get('value', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å')
            score = comp.get('score', 0)
            explanation = comp.get('explanation', '–ù–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏–π')
            
            formatted_text += f"### {area}\n"
            formatted_text += f"**–û—Ü–µ–Ω–∫–∞:** {score}/10\n"
            formatted_text += f"**–ü–æ—è—Å–Ω–µ–Ω–∏–µ:** {explanation}\n\n"
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤
    skills_analysis = gap_analysis_data.get('skills_analysis', {})
    if skills_analysis:
        formatted_text += "## –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤\n"
        
        # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏
        matching_skills = skills_analysis.get('matching_skills', [])
        if matching_skills:
            formatted_text += "### ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏\n"
            for skill in matching_skills:
                formatted_text += f"- {skill}\n"
            formatted_text += "\n"
        
        # –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞–≤—ã–∫–∏
        missing_skills = skills_analysis.get('missing_skills', [])
        if missing_skills:
            formatted_text += "### ‚ùå –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞–≤—ã–∫–∏\n"
            for skill in missing_skills:
                formatted_text += f"- {skill}\n"
            formatted_text += "\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        additional_skills = skills_analysis.get('additional_skills', [])
        if additional_skills:
            formatted_text += "### ‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞\n"
            for skill in additional_skills:
                formatted_text += f"- {skill}\n"
            formatted_text += "\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    improvement_suggestions = gap_analysis_data.get('improvement_suggestions', [])
    if improvement_suggestions:
        formatted_text += "## üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–∑—é–º–µ\n"
        for i, suggestion in enumerate(improvement_suggestions, 1):
            formatted_text += f"{i}. {suggestion}\n"
        formatted_text += "\n"
    
    # –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
    strong_points = gap_analysis_data.get('strong_points', [])
    if strong_points:
        formatted_text += "## üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞\n"
        for point in strong_points:
            formatted_text += f"- {point}\n"
        formatted_text += "\n"
    
    # –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
    weak_points = gap_analysis_data.get('weak_points', [])
    if weak_points:
        formatted_text += "## ‚ö†Ô∏è –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã\n"
        for point in weak_points:
            formatted_text += f"- {point}\n"
        formatted_text += "\n"
    
    return formatted_text