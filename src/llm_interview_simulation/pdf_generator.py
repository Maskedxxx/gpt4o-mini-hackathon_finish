# src/llm_interview_simulation/pdf_generator.py
import logging
import os
from io import BytesIO
from datetime import datetime
from typing import Optional

from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase.pdfmetrics import registerFontFamily

from src.models.interview_simulation_models import InterviewSimulation

logger = logging.getLogger("pdf_generator")

class InterviewSimulationPDFGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–π –∏–Ω—Ç–µ—Ä–≤—å—é."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ PDF."""
        self.styles = getSampleStyleSheet()
        self._register_fonts()
        self._setup_custom_styles()
    
    def _register_fonts(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤."""
        try:
            # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ —Å–æ —à—Ä–∏—Ñ—Ç–∞–º–∏
            possible_font_paths = [
                os.getenv('FONTS_PATH'),            # –ü—É—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
                "/Users/mask/Desktop/dejavu-sans",  # –¢–µ–∫—É—â–∏–π –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                "./fonts/dejavu-sans",              # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ
                "/usr/share/fonts/truetype/dejavu", # Linux —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
                "/System/Library/Fonts",            # macOS —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            ]
            
            font_path = None
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç–∞–º
            for path in possible_font_paths:
                if path and os.path.exists(path):
                    font_path = path
                    break
            
            if not font_path:
                raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç–∞–º DejaVu")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã DejaVu
            font_files = {
                'DejaVuSans': 'DejaVuSans.ttf',
                'DejaVuSans-Bold': 'DejaVuSans-Bold.ttf', 
                'DejaVuSans-Oblique': 'DejaVuSans-Oblique.ttf',
                'DejaVuSans-BoldOblique': 'DejaVuSans-BoldOblique.ttf'
            }
            
            fonts_registered = 0
            for font_name, font_file in font_files.items():
                font_file_path = os.path.join(font_path, font_file)
                if os.path.exists(font_file_path):
                    pdfmetrics.registerFont(TTFont(font_name, font_file_path))
                    fonts_registered += 1
                else:
                    logger.warning(f"–§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {font_file_path}")
            
            if fonts_registered == 0:
                raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —à—Ä–∏—Ñ—Ç–∞ DejaVu")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ–º–µ–π—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–æ–≤
            registerFontFamily('DejaVuSans',
                             normal='DejaVuSans',
                             bold='DejaVuSans-Bold',
                             italic='DejaVuSans-Oblique',
                             boldItalic='DejaVuSans-BoldOblique')
            
            self.font_family = 'DejaVuSans'
            logger.info(f"–†—É—Å—Å–∫–∏–µ —à—Ä–∏—Ñ—Ç—ã DejaVu —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ {font_path} ({fonts_registered} —Ñ–∞–π–ª–æ–≤)")
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç—ã DejaVu: {e}. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç.")
            self.font_family = 'Helvetica'
    
    def _setup_custom_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è PDF."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Title'],
            fontName=self.font_family,
            fontSize=18,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor='#2E4BC6'
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
        self.section_style = ParagraphStyle(
            'SectionHeader',
            parent=self.styles['Heading1'],
            fontName=f'{self.font_family}-Bold',
            fontSize=14,
            spaceAfter=12,
            spaceBefore=20,
            textColor='#1F4E79'
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
        self.subsection_style = ParagraphStyle(
            'SubsectionHeader',
            parent=self.styles['Heading2'],
            fontName=f'{self.font_family}-Bold',
            fontSize=12,
            spaceAfter=8,
            spaceBefore=15,
            textColor='#4472C4'
        )
        
        # –°—Ç–∏–ª—å –¥–ª—è HR –≤–æ–ø—Ä–æ—Å–æ–≤
        self.hr_style = ParagraphStyle(
            'HRStyle',
            parent=self.styles['Normal'],
            fontName=self.font_family,
            fontSize=11,
            spaceAfter=8,
            spaceBefore=8,
            leftIndent=20,
            textColor='#C55A5A',
            alignment=TA_JUSTIFY
        )
        
        # –°—Ç–∏–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        self.candidate_style = ParagraphStyle(
            'CandidateStyle',
            parent=self.styles['Normal'],
            fontName=self.font_family,
            fontSize=11,
            spaceAfter=8,
            spaceBefore=8,
            leftIndent=20,
            textColor='#548235',
            alignment=TA_JUSTIFY
        )
        
        # –°—Ç–∏–ª—å –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–ª–æ–∫–æ–≤
        self.analysis_style = ParagraphStyle(
            'AnalysisStyle',
            parent=self.styles['Normal'],
            fontName=self.font_family,
            fontSize=10,
            spaceAfter=12,
            spaceBefore=12,
            leftIndent=15,
            rightIndent=15,
            alignment=TA_JUSTIFY,
            textColor='#404040'
        )
        
        # –°—Ç–∏–ª—å –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        self.metadata_style = ParagraphStyle(
            'MetadataStyle',
            parent=self.styles['Normal'],
            fontName=self.font_family,
            fontSize=9,
            spaceAfter=6,
            textColor='#666666',
            alignment=TA_LEFT
        )
    
    def _create_header_section(self, simulation: InterviewSimulation) -> list:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—É—é —Å–µ–∫—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        elements = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        title = f"–°–∏–º—É–ª—è—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é: {simulation.position_title}"
        elements.append(Paragraph(title, self.title_style))
        elements.append(Spacer(1, 20))
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_text = f"""
        <b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> {simulation.candidate_name}<br/>
        <b>–î–∞—Ç–∞ —Å–∏–º—É–ª—è—Ü–∏–∏:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}<br/>
        <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤:</b> {simulation.simulation_metadata.get('rounds_completed', 'N/A')}<br/>
        <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b> {simulation.company_context}
        """
        elements.append(Paragraph(info_text, self.metadata_style))
        elements.append(Spacer(1, 30))
        
        return elements
    
    def _create_dialog_section(self, simulation: InterviewSimulation) -> list:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –¥–∏–∞–ª–æ–≥–æ–º –∏–Ω—Ç–µ—Ä–≤—å—é."""
        elements = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        elements.append(Paragraph("–•–æ–¥ –∏–Ω—Ç–µ—Ä–≤—å—é", self.section_style))
        elements.append(Spacer(1, 15))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ä–∞—É–Ω–¥–∞–º
        rounds = {}
        for msg in simulation.dialog_messages:
            round_num = msg.round_number
            if round_num not in rounds:
                rounds[round_num] = []
            rounds[round_num].append(msg)
        
        # –í—ã–≤–æ–¥–∏–º –¥–∏–∞–ª–æ–≥ –ø–æ —Ä–∞—É–Ω–¥–∞–º
        for round_num in sorted(rounds.keys()):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—É–Ω–¥–∞
            round_title = f"–†–∞—É–Ω–¥ {round_num}"
            elements.append(Paragraph(round_title, self.subsection_style))
            
            # –°–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞
            round_messages = rounds[round_num]
            for msg in round_messages:
                if msg.speaker == "HR":
                    speaker_label = "üéØ <b>HR-–º–µ–Ω–µ–¥–∂–µ—Ä:</b>"
                    style = self.hr_style
                else:
                    speaker_label = "üíº <b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b>"
                    style = self.candidate_style
                
                message_text = f"{speaker_label} {msg.message}"
                elements.append(Paragraph(message_text, style))
            
            elements.append(Spacer(1, 15))
        
        return elements
    
    def _create_analysis_section(self, simulation: InterviewSimulation) -> list:
        """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å–µ–∫—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        elements = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        elements.append(Paragraph("–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é", self.section_style))
        elements.append(Spacer(1, 15))
        
        # –û—Ü–µ–Ω–∫–∞ HR
        elements.append(Paragraph("–û—Ü–µ–Ω–∫–∞ HR-–º–µ–Ω–µ–¥–∂–µ—Ä–∞", self.subsection_style))
        hr_assessment_text = f"üìã {simulation.hr_assessment}"
        elements.append(Paragraph(hr_assessment_text, self.analysis_style))
        elements.append(Spacer(1, 15))
        
        # –ê–Ω–∞–ª–∏–∑ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è
        elements.append(Paragraph("–ê–Ω–∞–ª–∏–∑ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", self.subsection_style))
        performance_text = f"üìä {simulation.candidate_performance_analysis}"
        elements.append(Paragraph(performance_text, self.analysis_style))
        elements.append(Spacer(1, 15))
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        elements.append(Paragraph("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è", self.subsection_style))
        recommendations_text = f"üí° {simulation.improvement_recommendations}"
        elements.append(Paragraph(recommendations_text, self.analysis_style))
        elements.append(Spacer(1, 20))
        
        return elements
    
    def _create_footer_section(self, simulation: InterviewSimulation) -> list:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∏–∂–Ω—é—é —Å–µ–∫—Ü–∏—é —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏."""
        elements = []
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        elements.append(Spacer(1, 20))
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        tech_info = f"""
        <i>–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é.<br/>
        –ú–æ–¥–µ–ª—å –ò–ò: {simulation.simulation_metadata.get('model_used', 'N/A')}<br/>
        –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã: 1.0<br/>
        –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</i>
        """
        elements.append(Paragraph(tech_info, self.metadata_style))
        
        return elements
    
    def generate_pdf(self, simulation: InterviewSimulation) -> Optional[BytesIO]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –¥–æ–∫—É–º–µ–Ω—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é.
        
        Args:
            simulation: –û–±—ä–µ–∫—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
            
        Returns:
            BytesIO: PDF –¥–æ–∫—É–º–µ–Ω—Ç –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –¥–ª—è PDF
            buffer = BytesIO()
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc = SimpleDocTemplate(
                buffer,
                pagesize=A4,
                rightMargin=72,
                leftMargin=72,
                topMargin=72,
                bottomMargin=18
            )
            
            # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
            story = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏
            story.extend(self._create_header_section(simulation))
            story.extend(self._create_dialog_section(simulation))
            story.extend(self._create_analysis_section(simulation))
            story.extend(self._create_footer_section(simulation))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
            doc.build(story)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—É—Ñ–µ—Ä –≤ –Ω–∞—á–∞–ª–æ
            buffer.seek(0)
            
            logger.info("PDF –¥–æ–∫—É–º–µ–Ω—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            return buffer
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
            return None
    
    def generate_filename(self, simulation: InterviewSimulation) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è PDF."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        clean_title = "".join(c for c in simulation.position_title if c.isalnum() or c in (' ', '-', '_'))[:50]
        clean_title = clean_title.replace(' ', '_')
        
        return f"interview_simulation_{clean_title}_{timestamp}.pdf"